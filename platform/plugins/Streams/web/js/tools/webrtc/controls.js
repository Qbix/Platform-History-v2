(function ($, window, undefined) {
	var icons = {
		camera: '<svg class="camera-icon" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498"    xml:space="preserve">  <path fill="#FFFFFF" class="cameraPath" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M77.156,60.693l-15.521-8.961v8.51H25.223v-23.42   h36.412v8.795l15.521-8.961V60.693z"/>  </svg>',
		disabledCamera: '<svg  version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-0.165 -0.245 99.499 99.498" enable-background="new -0.165 -0.245 99.499 99.498"    xml:space="preserve">  <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M49.584,95.203   c-25.198,0-45.698-20.501-45.698-45.699s20.5-45.699,45.698-45.699c25.199,0,45.699,20.5,45.699,45.699S74.783,95.203,49.584,95.203   z"/>  <polygon fill="#FFFFFF" points="61.635,39.34 43.63,60.242 61.635,60.242 61.635,51.732 77.156,60.693 77.156,36.656 61.635,45.617    "/>  <polygon fill="#FFFFFF" points="25.223,36.822 25.223,60.242 34.391,60.242 54.564,36.822 "/>  <rect x="47.585" y="11.385" transform="matrix(0.7578 0.6525 -0.6525 0.7578 43.3117 -20.7363)" fill="#C12337" width="4" height="73.163"/>  </svg>',
		microphone:'<svg class="microphone-icon" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px"    y="0px" viewBox="-0.165 -0.245 99.499 99.498"    enable-background="new -0.165 -0.245 99.499 99.498" xml:space="preserve">  <path fill="#FFFFFF" d="M49.584-0.245c-27.431,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.432,0,49.75-22.317,49.75-49.749C99.334,22.073,77.016-0.245,49.584-0.245z M41.061,32.316c0-4.655,3.775-8.43,8.431-8.43   c4.657,0,8.43,3.774,8.43,8.43v19.861c0,4.655-3.773,8.431-8.43,8.431c-4.656,0-8.431-3.775-8.431-8.431V32.316z M63.928,52.576   c0,7.32-5.482,13.482-12.754,14.336v5.408h6.748v3.363h-16.86V72.32h6.749v-5.408c-7.271-0.854-12.753-7.016-12.754-14.336v-10.33   h3.362v10.125c0,6.115,4.958,11.073,11.073,11.073c6.116,0,11.073-4.958,11.073-11.073V42.246h3.363V52.576z"/>  </svg>',
		disabledMicrophone:'<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0.049 -0.245 99.499 99.498" enable-background="new 0.049 -0.245 99.499 99.498"    xml:space="preserve">  <path fill="#FFFFFF" d="M49.797,99.253c-27.431,0-49.749-22.317-49.749-49.749c0-27.431,22.317-49.749,49.749-49.749   c27.432,0,49.75,22.317,49.75,49.749C99.548,76.936,77.229,99.253,49.797,99.253z M49.797,3.805   c-25.198,0-45.698,20.5-45.698,45.699s20.5,45.699,45.698,45.699c25.2,0,45.7-20.501,45.7-45.699S74.997,3.805,49.797,3.805z"/>  <path fill="#FFFFFF" d="M49.798,60.607c4.657,0,8.43-3.775,8.43-8.431v-8.634L44.893,59.024   C46.276,60.017,47.966,60.607,49.798,60.607z"/>  <path fill="#FFFFFF" d="M58.229,32.316c0-4.656-3.773-8.43-8.43-8.43c-4.656,0-8.43,3.775-8.431,8.43v19.861   c0,0.068,0.009,0.135,0.01,0.202l16.851-19.563V32.316z"/>  <path fill="#FFFFFF" d="M48.117,66.912v5.408h-6.749v3.363h16.86V72.32h-6.748v-5.408c7.271-0.854,12.754-7.016,12.754-14.336   v-10.33H60.87v10.125c0,6.115-4.957,11.073-11.072,11.073c-2.537,0-4.867-0.862-6.733-2.297l-2.305,2.675   C42.813,65.475,45.331,66.585,48.117,66.912z"/>  <path fill="#FFFFFF" d="M38.725,52.371V42.246h-3.362v10.33c0,1.945,0.397,3.803,1.102,5.507l2.603-3.022   C38.852,54.198,38.725,53.301,38.725,52.371z"/>  <rect x="47.798" y="11.385" transform="matrix(0.7578 0.6525 -0.6525 0.7578 43.3634 -20.8757)" fill="#C12337" width="4" height="73.163"/>  </svg>',
		endCall: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" viewBox="-0.291 -0.433 230 230" enable-background="new -0.291 -0.433 230 230"    xml:space="preserve">  <defs>  </defs>  <path fill="#FFFFFF" d="M114.422,228.845C51.33,228.845,0,177.514,0,114.422C0,51.33,51.33,0,114.422,0   s114.423,51.33,114.423,114.422C228.845,177.514,177.515,228.845,114.422,228.845z M114.422,9.315   C56.466,9.315,9.315,56.466,9.315,114.422s47.151,105.107,105.107,105.107c57.957,0,105.107-47.151,105.107-105.107   S172.379,9.315,114.422,9.315z"/>  <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M48.375,111.046c-0.664,1.316-1.611,2.92-2.065,4.541   c-1.356,4.839-2.112,14.78,2.549,17.842c2.607,1.713,5.979,1.069,8.826,1.111c3.344,0.049,5.93,0.229,8.771,0.217   c4.818-0.021,13.588,1.619,16.644-2.956c3.33-4.986-0.959-9.42,2.013-14.331c2.396-3.958,9.311-5.427,13.066-6.184   c10.175-2.051,18.202-2.478,29.615-0.585c4.551,0.755,12.535,2.3,15.838,6.334c3.666,4.476-1.481,12.21,3.761,16.249   c2.694,2.077,6.099,1.577,9.13,1.575c3.183-0.003,5.826-0.139,8.682-0.122c5.307,0.032,13.455,2.128,16.858-2.832   c2.741-3.994,0.906-11.205,0.905-14.399c-0.158-1.169-0.457-2.3-0.898-3.393c-2.855-11.688-20.192-19.097-33.174-22.435   c-22.619-5.815-46.142-4.622-64.881-0.965c-1.395,0.218-2.752,0.578-4.071,1.079c-0.491-0.026-0.944,0.094-1.357,0.359   c-1.281,0.188-2.526,0.517-3.732,0.989c-8.698,3.484-17.809,5.413-24.858,15.118C49.383,108.49,48.274,110.399,48.375,111.046z"/> </svg>',
		dots: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <circle fill="#FFFFFF" cx="50.804" cy="16.167" r="10"/>  <circle fill="#FFFFFF" cx="50.804" cy="51.166" r="10"/>  <circle fill="#FFFFFF" cx="50.804" cy="86.166" r="10"/>  </svg>',
		screen: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0.074 0.053 99.499 99.498" enable-background="new 0.074 0.053 99.499 99.498"    xml:space="preserve">  <rect x="27.102" y="34.876" fill="#FFFFFF" width="45.375" height="24.868"/>  <path fill="#FFFFFF" d="M49.822,0.053c-27.432,0-49.749,22.317-49.749,49.749c0,27.432,22.317,49.749,49.749,49.749   c27.433,0,49.75-22.317,49.75-49.749C99.572,22.371,77.255,0.053,49.822,0.053z M76.494,63.377H53.436v5.196h5.43v3.75H40.782v-3.75   h5.43v-5.196h-23.06V31.281h53.343V63.377z"/>  </svg>',
		user: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0.251 0.251 99.498 99.498" enable-background="new 0.251 0.251 99.498 99.498"    xml:space="preserve">  <path fill="#FFFFFF" d="M49.999,0.251C22.568,0.251,0.251,22.568,0.251,50c0,27.432,22.317,49.749,49.748,49.749   c27.433,0,49.75-22.317,49.75-49.749C99.749,22.568,77.432,0.251,49.999,0.251z M50.085,27.266c6.663,0,12.062,5.83,12.062,13.021   c0,7.19-5.4,13.02-12.062,13.02c-6.66,0-12.061-5.83-12.061-13.02C38.024,33.096,43.425,27.266,50.085,27.266z M25.789,70.721   c0.593-9.297,11.208-16.71,24.207-16.71c13.001,0,23.619,7.412,24.215,16.71H25.789z"/>  </svg>',
		backArrow: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    width="35.317px" height="35.445px" viewBox="0 0 35.317 35.445" enable-background="new 0 0 35.317 35.445" xml:space="preserve">  <polyline fill="none" stroke="#000000" stroke-width="4" stroke-miterlimit="10" points="19.135,34.031 2.828,17.722 19.135,1.414    "/>  <line fill="none" stroke="#000000" stroke-width="4" stroke-miterlimit="10" x1="2.645" y1="17.722" x2="35.317" y2="17.722"/>  </svg>',
		enabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 99.999 99.999" enable-background="new 0 0 99.999 99.999" xml:space="preserve">  <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.571,22.429,50,50,50c27.569,0,50-22.429,50-50   C99.999,22.431,77.568,0,50,0z M45.261,67.689c0,0.148-0.188,0.191-0.261,0.326c-0.026,0.049-0.149,0.098-0.187,0.141   c-0.076,0.084-0.217,0.146-0.324,0.188c-0.053,0.018-0.131,0.029-0.188,0.033c-0.056,0.008-0.125,0.006-0.18-0.004   c-0.15-0.021-0.186-0.292-0.316-0.364l-10.094-7.804h-8.544c-0.06,0-0.121,0.224-0.179,0.21c-0.058-0.016-0.114,0.077-0.166,0.05   c-0.105-0.061-0.192-0.089-0.252-0.193c-0.03-0.053-0.162-0.079-0.178-0.137c-0.015-0.059-0.132-0.089-0.132-0.15V40.02   c0-0.06,0.117-0.121,0.132-0.178c0.016-0.058,0.094-0.114,0.123-0.166c0.03-0.052,0.095-0.1,0.137-0.143   c0.086-0.086,0.206-0.209,0.322-0.242c0.058-0.016,0.133-0.086,0.193-0.086h8.545l10.089-7.51c0.049-0.028,0.095-0.03,0.146-0.052   c0.141-0.059,0.184-0.031,0.333-0.035c0.055,0.012,0.11,0.032,0.165,0.045c0.05,0.025,0.104,0.048,0.151,0.079   c0.046,0.031,0.09,0.07,0.127,0.112c0.077,0.084,0.31,0.187,0.337,0.296c0.013,0.055,0.2,0.113,0.2,0.169V67.689z M53.839,60.984   c-0.25,0-0.502-0.095-0.695-0.283c-0.396-0.386-0.406-1.019-0.021-1.412c9.075-9.354,0.391-18.188,0.018-18.56   c-0.396-0.389-0.396-1.022-0.01-1.415c0.393-0.392,1.024-0.393,1.415-0.005c0.105,0.105,10.449,10.615,0.016,21.372   C54.361,60.883,54.102,60.984,53.839,60.984z M60.025,66.293c-0.25,0-0.502-0.094-0.693-0.281c-0.396-0.385-0.406-1.02-0.021-1.414   c14.265-14.703,0.603-28.596,0.015-29.181c-0.394-0.389-0.396-1.022-0.007-1.414c0.392-0.392,1.023-0.393,1.414-0.005   c0.158,0.157,15.638,15.888,0.015,31.991C60.548,66.189,60.289,66.293,60.025,66.293z M66.607,70.43   c-0.197,0.203-0.459,0.301-0.719,0.301c-0.252,0-0.502-0.094-0.697-0.279c-0.396-0.387-0.404-1.02-0.021-1.414   c18.603-19.174,0.781-37.296,0.015-38.06c-0.394-0.389-0.396-1.022-0.006-1.414c0.389-0.392,1.022-0.394,1.413-0.005   C66.794,29.759,86.568,49.853,66.607,70.43z"/>  </svg>  ',
		disabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 99.999 99.999" enable-background="new 0 0 99.999 99.999" xml:space="preserve">  <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.571,22.429,50,50,50c27.568,0,49.999-22.429,49.999-50   C99.999,22.431,77.568,0,50,0z M50,95.929C24.675,95.929,4.071,75.325,4.071,50C4.071,24.675,24.675,4.07,50,4.07   C75.324,4.07,95.927,24.674,95.927,50C95.927,75.326,75.324,95.929,50,95.929z"/>  <g>   <path fill="#FFFFFF" d="M43.8,68.242c0.13,0.072,0.16,0.109,0.31,0.131c0.055,0.01,0.113,0.012,0.169,0.004    c0.056-0.004,0.112-0.016,0.165-0.033c0.107-0.041,0.203-0.104,0.279-0.188c0.038-0.043,0.277-0.092,0.303-0.141    c0.072-0.135,0.287-0.178,0.287-0.326v-6.393l-4.271,4.722L43.8,68.242z"/>   <path fill="#FFFFFF" d="M45.314,32.309c0-0.056-0.213-0.113-0.227-0.168c-0.027-0.109-0.185-0.211-0.261-0.295    c-0.037-0.042-0.132-0.079-0.178-0.11c-0.047-0.031-0.126-0.05-0.177-0.075c-0.055-0.013-0.123-0.025-0.178-0.037    c-0.149,0.004-0.199-0.008-0.339,0.051c-0.051,0.022-0.1,0.291-0.149,0.319l-10.092,7.808h-8.545c-0.06,0-0.121-0.228-0.179-0.212    c-0.117,0.032-0.223-0.024-0.309,0.062c-0.042,0.043-0.079,0.032-0.109,0.084c-0.03,0.052-0.135,0.078-0.151,0.136    c-0.016,0.057-0.105,0.088-0.105,0.148v19.964c0,0.062,0.09,0.121,0.105,0.18c0.016,0.058,0.08,0.113,0.11,0.166    c0.06,0.104,0.167,0.191,0.273,0.252c0.052,0.027,0.118,0.116,0.176,0.132c0.058,0.014,0.129,0.088,0.189,0.088h8.544l1.704,1.059    l9.898-11.321V32.309z"/>   <path fill="#FFFFFF" d="M53.123,59.289c-0.385,0.394-0.375,1.026,0.021,1.412c0.193,0.188,0.445,0.283,0.695,0.283    c0.263,0,0.522-0.102,0.722-0.303c5.376-5.542,5.232-11.014,3.819-15.036l-1.497,1.738C57.72,50.709,57.34,54.942,53.123,59.289z"    />   <path fill="#FFFFFF" d="M54.545,39.31c-0.391-0.388-1.021-0.387-1.415,0.005c-0.387,0.393-0.387,1.026,0.01,1.415    c0.018,0.018,0.059,0.06,0.111,0.114l1.308-1.52C54.556,39.321,54.546,39.311,54.545,39.31z"/>   <path fill="#FFFFFF" d="M59.311,64.598c-0.385,0.395-0.375,1.029,0.021,1.414c0.191,0.188,0.443,0.281,0.693,0.281    c0.264,0,0.522-0.104,0.722-0.305c10.414-10.733,7.009-21.294,3.533-27.195l-1.324,1.538    C66.038,45.763,68.617,55.007,59.311,64.598z"/>   <path fill="#FFFFFF" d="M65.171,69.037c-0.384,0.395-0.375,1.027,0.021,1.414c0.195,0.186,0.445,0.279,0.697,0.279    c0.26,0,0.521-0.098,0.719-0.301c15.134-15.601,7.428-30.921,2.728-37.507l-1.299,1.509C72.5,40.69,79.215,54.562,65.171,69.037z"    />  </g>  <rect x="47.989" y="13.233" transform="matrix(0.7577 0.6526 -0.6526 0.7577 44.7397 -20.5144)" fill="#C12337" width="4.02" height="73.532"/>  </svg>',
		switchCameras: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <g>   <path fill="#FFFFFF" d="M50.037,43.904c-3.939,0-7.151,3.212-7.151,7.168c0,3.947,3.212,7.167,7.151,7.167    c3.947,0,7.152-3.22,7.152-7.167C57.189,47.116,53.984,43.904,50.037,43.904z M50.037,56.49c-2.988,0-5.402-2.431-5.402-5.417    c0-2.997,2.414-5.418,5.402-5.418c2.98,0,5.402,2.422,5.402,5.418C55.439,54.069,53.017,56.49,50.037,56.49z"/>   <path fill="#FFFFFF" d="M63.047,43.286c-0.596,0-1.084,0.487-1.084,1.091c0,0.604,0.488,1.091,1.084,1.091    c0.597,0,1.083-0.487,1.083-1.091C64.13,43.773,63.644,43.286,63.047,43.286z"/>   <path fill="#FFFFFF" d="M50,0C22.431,0,0,22.43,0,50c0,27.571,22.429,50,50,50c27.569,0,50-22.429,50-50C100,22.431,77.569,0,50,0z     M25.111,51.626c0.934-0.933,2.432-0.933,3.366,0c0.934,0.936,0.926,2.446-0.007,3.382l-6.642,6.634    c-0.448,0.451-1.058,0.703-1.692,0.703c-0.633,0-1.242-0.252-1.689-0.703l-6.639-6.634c-0.933-0.936-0.933-2.446,0-3.382    c0.934-0.933,2.365-0.931,3.299,0l2.477,2.563V50c0-17.784,14.551-32.255,32.336-32.255c1.321,0,2.427,1.071,2.427,2.389    c0,1.32-1.017,2.39-2.337,2.39C34.86,22.524,22.583,34.85,22.583,50v4.189L25.111,51.626z M33.583,59.54V43.897    c0-1.44,1.517-3.086,2.956-3.086h5.341l2.703-2.58v-0.008c1-0.518,1.5-1.412,2.258-1.412h6.502c0.711,0,1.338,0.578,1.804,1.043    l0.015,0.158c0.007,0,0.022-0.172,0.022-0.172l3.128,2.971h5.224c1.433,0,3.048,1.646,3.048,3.086V59.54    c0,1.439-1.615,3.271-3.048,3.271H36.538C35.099,62.811,33.583,60.979,33.583,59.54z M86.506,49.071    c-0.614,0-1.063-0.235-1.529-0.698l-2.395-2.56V50c0,17.787-14.631,32.255-32.419,32.255c-1.32,0-2.47-1.067-2.47-2.39    c0-1.32,1.08-2.388,2.399-2.388c15.151,0,27.489-12.329,27.489-27.478v-4.187l-2.611,2.56c-0.934,0.931-2.473,0.931-3.403,0    c-0.938-0.934-0.951-2.447-0.014-3.381l6.63-6.636c0.935-0.935,2.442-0.935,3.375,0l6.635,6.636    c0.936,0.934,0.935,2.447-0.001,3.381C87.728,48.836,87.116,49.071,86.506,49.071z"/>  </g>  </svg>',
		changeView: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="2.292 0.765 100.001 100" enable-background="new 2.292 0.765 100.001 100"    xml:space="preserve">  <path fill="#FFFFFF" d="M52.291,0.765c-27.568,0-49.999,22.43-49.999,50c0,27.57,22.429,49.999,49.999,49.999   c27.57,0,50.002-22.429,50.002-49.999C102.293,23.196,79.861,0.765,52.291,0.765z M49.793,78.265H24.792v-25h5v20h20.001V78.265z    M49.793,28.265H29.792v20h-5v-25h25.001V28.265z M79.793,78.265h-25v-5h20v-20h5V78.265z M79.793,48.265h-5v-20h-20v-5h25V48.265z"   />  </svg>  ',
		switchOffCameras: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-2.176 -1.153 100 99.999" enable-background="new -2.176 -1.153 100 99.999"    xml:space="preserve">  <path fill="#8C8C8C" d="M47.823-1.153c-27.569,0-50,22.43-50,49.999c0,27.571,22.429,50,50,50c27.569,0,50.001-22.429,50.001-50   C97.824,21.277,75.393-1.153,47.823-1.153z M70.475,66.547l-4.949,4.949L47.824,53.795L30.122,71.496l-4.949-4.949l17.701-17.701   L25.173,31.145l4.949-4.95l17.702,17.702l17.702-17.702l4.949,4.95L52.773,48.846L70.475,66.547z"/>  </svg>  ',
		textChat: '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="4.559 -1.605 100 99.999" enable-background="new 4.559 -1.605 100 99.999"    xml:space="preserve">  <path fill="#FFFFFF" d="M54.559-1.605c-27.569,0-50,22.43-50,50s22.429,49.999,50,49.999c27.569,0,50.001-22.429,50.001-49.999   C104.56,20.825,82.128-1.605,54.559-1.605z M82.718,60.974c0,3.964-3.248,7.211-7.21,7.211H64.075l-6.625,5.91   c-1.624,1.496-4.157,1.496-5.781,0l-6.626-5.91H33.61c-3.962,0-7.21-3.247-7.21-7.211V32.782c0-3.963,3.248-7.21,7.21-7.21h41.963   c3.962,0,7.211,3.183,7.145,7.21V60.974z"/>  <path fill="#FFFFFF" d="M42.314,42.656c-2.598,0-4.677,2.078-4.677,4.677s2.079,4.677,4.677,4.677s4.677-2.078,4.677-4.677   S44.913,42.656,42.314,42.656z"/>  <path fill="#FFFFFF" d="M55.371,42.656c-2.598,0-4.677,2.078-4.677,4.677s2.079,4.677,4.677,4.677s4.677-2.078,4.677-4.677   S57.969,42.656,55.371,42.656z"/>  <path fill="#FFFFFF" d="M68.428,42.656c-2.599,0-4.678,2.078-4.678,4.677s2.079,4.677,4.678,4.677c2.598,0,4.678-2.078,4.678-4.677   S71.025,42.656,68.428,42.656z"/>  </svg>',
		disconnectIcon: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"  viewBox="1.567 -0.122 100 99.999" enable-background="new 1.567 -0.122 100 99.999"    xml:space="preserve">  <path fill="#C12236" d="M51.566-0.122c-27.568,0-49.999,22.43-49.999,50c0,27.57,22.429,49.999,49.999,49.999   c27.57,0,50.001-22.429,50.001-49.999C101.567,22.309,79.137-0.122,51.566-0.122z M60.213,61.126l-8.296,10.788   c-0.082,0.109-0.212,0.174-0.349,0.174s-0.266-0.064-0.349-0.174l-8.295-10.788c-0.061-0.08-0.091-0.175-0.091-0.268   c0-0.096,0.028-0.188,0.087-0.268c0.119-0.156,0.331-0.217,0.514-0.143l5.493,2.168V49.901c0-0.243,0.196-0.439,0.44-0.439h4.402   c0.242,0,0.439,0.197,0.439,0.439v12.715l5.492-2.168c0.184-0.074,0.395-0.014,0.514,0.143   C60.334,60.749,60.334,60.965,60.213,61.126z M78.925,49.499c-0.014,0.072-0.03,0.139-0.045,0.209   c-0.024,0.125-0.049,0.24-0.072,0.352c-0.012,0.046-0.021,0.099-0.032,0.146c-0.146,0.608-0.289,0.963-0.289,0.963   s-0.009-0.009-0.022-0.021c-1.048,2.637-3.365,4.287-5.714,3.43l-5.195-2.165c-2.801-1.021-4.575-4.831-3.967-8.51l0.051-0.297   c-6.357-1.769-14.504-2.456-23.952,0.218l0.116,0.696c0.611,3.679-1.165,7.487-3.965,8.509l-5.196,1.627   c-2.73,0.995-5.421-0.763-6.12-4.276c-0.651-2.066-4.049-16.147,24.39-16.693c29.981-0.572,30.765,11.326,30.006,15.808   L78.925,49.499z"/>  </svg>',
		freeViewModeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"  viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.43,0,50s22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.431,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M70.4,41.13v-6.21h-6.211v-6.208H23.39v30.157h6.208v6.209h6.209v6.209h40.8V41.13H70.4z M25.165,57.095   V30.486h37.253v4.434H29.599v22.175H25.165z M31.373,63.303v-4.435V36.694h32.816h4.438v4.436H35.808v22.173H31.373z M74.835,69.512   H37.582v-4.435V42.903H70.4h4.435V69.512z"/>  </svg> ',
		freeViewModeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.43,0,50s22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.431,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M70.4,41.13v-6.21h-6.211v-6.208H23.39v30.157h6.208v6.209h6.209v6.209h40.8V41.13H70.4z M25.165,57.095   V30.486h37.253v4.434H29.599v22.175H25.165z M31.373,63.303v-4.435V36.694h32.816h4.438v4.436H35.808v22.173H31.373z M74.835,69.512   H37.582v-4.435V42.903H70.4h4.435V69.512z"/>  </svg>',
		tiledViewModeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 99.998" enable-background="new 0 0 100 99.998" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.998,50,49.998c27.57,0,50-22.429,50-49.999   C100,22.431,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M47.901,49.1H28.116c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.785     c0.662,0,1.199,0.537,1.199,1.199V47.9C49.101,48.563,48.563,49.1,47.901,49.1z M29.315,46.701h17.387V29.314H29.315V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,49.1H52.1c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.783     c0.663,0,1.2,0.537,1.2,1.199V47.9C73.083,48.563,72.546,49.1,71.883,49.1z M53.298,46.701h17.388V29.314H53.298V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,73.082H52.1c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.783     c0.663,0,1.2,0.539,1.2,1.201v19.783C73.083,72.545,72.546,73.082,71.883,73.082z M53.298,70.685h17.388V53.297H53.298V70.685z"/>   </g>   <g>    <path fill="#FFFFFF" d="M47.901,73.082H28.116c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.785     c0.662,0,1.199,0.539,1.199,1.201v19.783C49.101,72.545,48.563,73.082,47.901,73.082z M29.315,70.685h17.387V53.297H29.315V70.685     z"/>   </g>  </g>  </svg>',
		tiledViewModeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 99.998" enable-background="new 0 0 100 99.998" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.43,0,50c0,27.569,22.429,49.998,50,49.998c27.57,0,50-22.429,50-49.999   C100,22.431,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M47.901,49.1H28.116c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.785     c0.662,0,1.199,0.537,1.199,1.199V47.9C49.101,48.563,48.563,49.1,47.901,49.1z M29.315,46.701h17.387V29.314H29.315V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,49.1H52.1c-0.662,0-1.199-0.537-1.199-1.199V28.115c0-0.662,0.537-1.199,1.199-1.199h19.783     c0.663,0,1.2,0.537,1.2,1.199V47.9C73.083,48.563,72.546,49.1,71.883,49.1z M53.298,46.701h17.388V29.314H53.298V46.701z"/>   </g>   <g>    <path fill="#FFFFFF" d="M71.883,73.082H52.1c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.783     c0.663,0,1.2,0.539,1.2,1.201v19.783C73.083,72.545,72.546,73.082,71.883,73.082z M53.298,70.685h17.388V53.297H53.298V70.685z"/>   </g>   <g>    <path fill="#FFFFFF" d="M47.901,73.082H28.116c-0.662,0-1.199-0.537-1.199-1.2V52.099c0-0.662,0.537-1.201,1.199-1.201h19.785     c0.662,0,1.199,0.539,1.199,1.201v19.783C49.101,72.545,48.563,73.082,47.901,73.082z M29.315,70.685h17.387V53.297H29.315V70.685     z"/>   </g>  </g>  </svg>',
		loudestExceptMeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M46.013,40.045c4.317,0,7.818-3.5,7.818-7.819c-0.005-4.315-3.503-7.813-7.818-7.818   c-4.318,0-7.818,3.501-7.818,7.818C38.194,36.544,41.695,40.045,46.013,40.045z"/>  <g>   <path fill="#4AAA4E" d="M61,54.463v-4.871c0-3.671-2.686-6.709-6.352-6.938c-2.137,2.683-5.294,4.247-8.724,4.247    c-3.429,0-6.467-1.564-8.603-4.247C33.657,42.882,31,45.919,31,49.592V66h15.396l-0.888-2.303c-0.101-0.275-0.051-0.508,0.13-0.739    c0.181-0.232,0.469-0.319,0.763-0.291l3.488,0.382L61,54.463z"/>   <path fill="#4AAA4E" d="M50.844,64.646c-0.174,0.133-0.391,0.194-0.608,0.173l-2.638-0.26l2.586,7.176l1.863-1.884    c0.155-0.154,0.361-0.246,0.58-0.254l18.908-0.765l-5.64-15.659L50.844,64.646z"/>   <polygon fill="#4AAA4E" points="56.439,71.172 57.945,75.35 66.336,72.326 65.785,70.794  "/>   <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z     M46.013,22.681c5.271,0,9.546,4.273,9.546,9.545c0,5.272-4.274,9.546-9.546,9.546c-5.272,0-9.546-4.274-9.546-9.546    C36.473,26.958,40.743,22.688,46.013,22.681z M73.465,70.13c-0.154,0.229-0.408,0.371-0.683,0.382l-5.188,0.211l0.659,1.831    c0.162,0.448-0.071,0.943-0.521,1.105l-10.017,3.608c-0.215,0.077-0.452,0.066-0.66-0.031c-0.208-0.097-0.368-0.272-0.445-0.488    l-1.982-5.504l-1.593,0.065l-2.589,2.611c-0.209,0.211-0.512,0.3-0.802,0.233s-0.525-0.289-0.624-0.57L47.02,68H29.806    c-0.226,0-0.419-0.068-0.581-0.227C29.064,67.613,29,67.41,29,67.184V49.592c0-4.784,3.857-8.661,8.642-8.66    c0.274-0.003,0.521,0.125,0.684,0.345c1.803,2.446,4.655,3.89,7.694,3.889s5.893-1.445,7.696-3.891    c0.164-0.22,0.39-0.348,0.663-0.343c4.782,0,8.621,3.879,8.621,8.66v3.554l2.744-2.06c0.223-0.167,0.526-0.219,0.794-0.142    c0.263,0.077,0.481,0.277,0.574,0.535l6.444,17.877C73.649,69.615,73.617,69.903,73.465,70.13z M74.719,63.705    c-0.13,0.281-0.401,0.469-0.71,0.495c-0.309,0.025-0.606-0.115-0.783-0.371c-0.176-0.257-0.2-0.585-0.065-0.864    c0.523-1.1,0.585-2.364,0.169-3.509c-0.44-1.224-1.354-2.22-2.534-2.766c-0.433-0.202-0.617-0.717-0.414-1.149    c0.203-0.432,0.717-0.615,1.148-0.413c1.598,0.739,2.832,2.088,3.426,3.746C75.526,60.451,75.442,62.19,74.719,63.705z     M78.168,64.801c-0.202,0.431-0.718,0.617-1.15,0.413c-0.431-0.202-0.615-0.717-0.413-1.149c0.877-1.878,0.955-4.033,0.213-5.971    c-0.719-1.96-2.18-3.557-4.067-4.446c-0.284-0.131-0.473-0.4-0.501-0.71s0.114-0.609,0.37-0.787    c0.255-0.176,0.586-0.201,0.865-0.066c2.297,1.082,4.077,3.022,4.95,5.408C79.34,59.864,79.244,62.502,78.168,64.801z"/>  </g>  </svg>',
		loudestExceptMeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M46.013,40.045c4.317,0,7.818-3.5,7.818-7.819c-0.005-4.315-3.503-7.813-7.818-7.818   c-4.318,0-7.818,3.501-7.818,7.818C38.194,36.544,41.695,40.045,46.013,40.045z"/>  <g>   <path fill="#8C8C8C" d="M61,54.463v-4.871c0-3.671-2.686-6.709-6.352-6.938c-2.137,2.683-5.294,4.247-8.725,4.247    c-3.429,0-6.467-1.564-8.603-4.247C33.657,42.882,31,45.919,31,49.592V66h15.396l-0.888-2.303c-0.101-0.275-0.051-0.508,0.13-0.739    c0.181-0.231,0.469-0.319,0.763-0.291l3.488,0.382L61,54.463z"/>   <path fill="#8C8C8C" d="M50.844,64.646c-0.174,0.133-0.391,0.193-0.608,0.172l-2.638-0.26l2.586,7.176l1.863-1.883    c0.155-0.154,0.361-0.246,0.58-0.254l18.908-0.766l-5.641-15.659L50.844,64.646z"/>   <polygon fill="#8C8C8C" points="56.439,71.172 57.945,75.35 66.336,72.326 65.785,70.794  "/>   <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z     M46.013,22.681c5.271,0,9.545,4.273,9.545,9.545s-4.273,9.546-9.545,9.546s-9.546-4.274-9.546-9.546    C36.473,26.958,40.743,22.688,46.013,22.681z M73.465,70.13c-0.154,0.229-0.408,0.371-0.683,0.382l-5.188,0.211l0.659,1.832    c0.162,0.447-0.071,0.942-0.521,1.104l-10.018,3.608c-0.215,0.076-0.451,0.065-0.66-0.031c-0.207-0.098-0.367-0.272-0.445-0.488    l-1.981-5.504l-1.593,0.064l-2.589,2.611c-0.209,0.211-0.512,0.301-0.802,0.232c-0.29-0.066-0.525-0.288-0.624-0.569l-2-5.583    H29.806c-0.226,0-0.419-0.068-0.581-0.227C29.064,67.613,29,67.41,29,67.184V49.592c0-4.784,3.857-8.661,8.642-8.66    c0.274-0.003,0.521,0.125,0.684,0.345c1.803,2.446,4.655,3.89,7.694,3.889s5.893-1.445,7.696-3.891    c0.164-0.22,0.39-0.348,0.663-0.343c4.782,0,8.621,3.879,8.621,8.66v3.555l2.744-2.061c0.223-0.167,0.525-0.219,0.794-0.143    c0.263,0.078,0.481,0.277,0.573,0.535l6.445,17.877C73.648,69.615,73.617,69.902,73.465,70.13z M74.719,63.705    c-0.13,0.281-0.4,0.469-0.71,0.495c-0.309,0.024-0.606-0.115-0.782-0.371c-0.177-0.257-0.201-0.585-0.065-0.864    c0.522-1.1,0.585-2.363,0.169-3.509c-0.439-1.224-1.354-2.22-2.534-2.767c-0.433-0.201-0.616-0.717-0.414-1.148    c0.203-0.432,0.718-0.615,1.147-0.413c1.599,0.739,2.832,2.088,3.427,3.746C75.525,60.451,75.441,62.189,74.719,63.705z     M78.168,64.801c-0.202,0.432-0.718,0.617-1.15,0.413c-0.431-0.202-0.615-0.717-0.412-1.149c0.877-1.877,0.955-4.032,0.213-5.971    c-0.719-1.96-2.18-3.557-4.067-4.445c-0.284-0.131-0.474-0.4-0.501-0.711c-0.027-0.31,0.113-0.608,0.37-0.787    c0.255-0.176,0.586-0.2,0.864-0.065c2.298,1.082,4.078,3.022,4.951,5.408C79.34,59.864,79.244,62.502,78.168,64.801z"/>  </g>  </svg>',
		maximizeLoudestOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <g>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0,0.759,0,1.466,0,2.206c0.736,0,1.44,0,2.172,0    c0-0.746,0-1.464,0-2.206C69.553,52.013,68.86,52.013,68.106,52.013z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0,0.756,0,1.46,0,2.191c0.737,0,1.442,0,2.167,0    c0-0.746,0-1.464,0-2.191C69.546,43.063,68.854,43.063,68.108,43.063z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0,0.763,0,1.465,0,2.171c0.742,0,1.447,0,2.165,0    c0-0.735,0-1.439,0-2.171C69.556,47.56,68.851,47.56,68.12,47.56z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M38.971,54.247c0,0,0,1.017,0,1.485    c-0.001,1.94-0.003,3.882-0.003,5.822c0,1.295,0.347,1.638,1.653,1.635c0.173,0,0.347,0,0.595,0c0-0.217,0-0.402,0-0.589    c0.002-1.625-0.009-3.251,0.011-4.877c0.011-0.93,0.768-1.474,1.539-1.139c0.448,0.195,0.675,0.566,0.678,1.036    c0.012,2.22,0.019,4.44-0.002,6.661c-0.007,0.707-0.457,1.112-1.181,1.133c-0.716,0.021-1.434,0.026-2.15,0    c-1.998-0.068-3.357-1.459-3.37-3.464c-0.016-2.36-0.004-4.721-0.004-7.081c0-0.188,0-0.376,0-0.628    c-1.301,0.052-2.527-0.028-3.492-0.992c-0.957-0.957-1.042-2.163-0.985-3.488c-0.355,0-0.679,0.009-1.003-0.002    c-0.727-0.025-1.218-0.473-1.228-1.103c-0.009-0.626,0.482-1.09,1.202-1.121c0.312-0.013,0.624-0.002,0.986-0.002    c0.026-0.487,0.027-0.936,0.078-1.378c0.213-1.887,1.545-3.089,3.453-3.104c1.958-0.016,3.916,0.002,5.874-0.016    c0.283-0.002,0.59-0.076,0.844-0.202c3.769-1.87,7.537-3.74,11.29-5.641c1.166-0.59,2.364-0.927,3.675-0.867    c0.575,0.026,1.154-0.008,1.73,0.013c1.151,0.044,2.08,0.823,2.146,1.968c0.091,1.55,0.05,3.109,0.063,4.664    c0.004,0.381,0,0.763,0,1.187c1.535,0.085,2.763,0.698,3.643,1.922c0.564,0.789,0.835,1.682,0.807,2.659    c-0.067,2.354-1.503,3.799-4.45,4.43c0,0.682,0,1.376,0,2.071c0,1.084,0.01,2.168-0.004,3.252    c-0.018,1.542-0.914,2.448-2.448,2.465c-1.063,0.012-2.137,0.065-3.189-0.051c-0.578-0.064-1.136-0.411-1.679-0.68    c-3.751-1.866-7.499-3.739-11.239-5.627c-0.499-0.253-0.993-0.384-1.552-0.36C40.524,54.24,38.971,54.247,38.971,54.247z     M59.08,38.572c-1.33,0.029-2.648-0.199-3.884,0.417c-3.812,1.902-7.623,3.806-11.425,5.727c-0.152,0.077-0.304,0.33-0.306,0.503    c-0.02,2.272-0.009,4.546-0.019,6.818c-0.001,0.277,0.07,0.433,0.334,0.563c3.487,1.731,6.968,3.476,10.452,5.216    c0.113,0.057,0.244,0.084,0.415,0.142c0-0.24,0-0.413,0-0.587c0.002-4.982,0.002-9.966,0.005-14.949    c0-0.226-0.002-0.456,0.033-0.68c0.077-0.514,0.488-0.876,1.001-0.908c0.525-0.033,0.973,0.253,1.113,0.762    c0.068,0.248,0.078,0.517,0.078,0.776c0.006,5.229,0.004,10.456,0.004,15.684c0,0.204,0,0.407,0,0.615c0.773,0,1.48,0,2.199,0    C59.08,51.965,59.08,45.294,59.08,38.572z M41.151,45.345c-0.077-0.026-0.125-0.057-0.174-0.058    c-1.748-0.004-3.497-0.024-5.245,0.001c-0.825,0.012-1.218,0.463-1.224,1.313c-0.01,1.329-0.003,2.657,0.002,3.986    c0.004,1.012,0.385,1.4,1.386,1.405c1.451,0.005,2.902,0.001,4.353,0.001c0.291,0,0.583,0,0.901,0    C41.151,49.73,41.151,47.537,41.151,45.345z M61.394,50.833c1.271-0.031,2.218-1.014,2.195-2.234    c-0.023-1.203-1.011-2.181-2.195-2.143C61.394,47.9,61.394,49.345,61.394,50.833z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0.754,0,1.446,0,2.172,0c0,0.742,0,1.46,0,2.206    c-0.731,0-1.436,0-2.172,0C68.106,53.479,68.106,52.771,68.106,52.013z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0.746,0,1.438,0,2.167,0c0,0.728,0,1.446,0,2.191    c-0.725,0-1.43,0-2.167,0C68.108,44.523,68.108,43.818,68.108,43.063z"/>   <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0.73,0,1.436,0,2.165,0c0,0.732,0,1.437,0,2.171    c-0.718,0-1.423,0-2.165,0C68.12,49.025,68.12,48.323,68.12,47.56z"/>   <path fill="#FFFFFF" d="M26.444,69.789c-0.091,0-0.184-0.012-0.277-0.035l-0.79-0.197c-0.805-0.201-1.595-0.945-1.878-1.769    c-0.256-0.744-0.35-2.642-0.35-3.735V33.115c0-2.022,1.646-3.668,3.667-3.668h40.061c0.629,0,1.138,0.51,1.138,1.139    c0,0.628-0.509,1.138-1.138,1.138H26.817c-0.767,0-1.391,0.624-1.391,1.392v30.938c0,1.507,0.147,2.752,0.227,2.997    c0.032,0.093,0.199,0.267,0.292,0.303l0.775,0.193c0.61,0.152,0.981,0.771,0.828,1.38C27.418,69.443,26.955,69.789,26.444,69.789z"    />   <path fill="#FFFFFF" d="M31.022,76.553c-0.122,0-0.242-0.019-0.354-0.059c-0.481-0.172-0.792-0.638-0.792-1.184v-6.789    c0-0.629,0.509-1.138,1.138-1.138c0.628,0,1.138,0.509,1.138,1.138v4.201c0.008-0.009,0.017-0.018,0.026-0.026l2.723-2.715    c1.087-1.085,1.833-1.849,1.933-1.961c0.121-0.145,0.587-0.637,1.224-0.637h35.125c0.768,0,1.392-0.624,1.392-1.392V33.115    c0-0.741-0.475-1.392-1.015-1.392h-2.15c-0.629,0-1.138-0.509-1.138-1.138c0-0.629,0.509-1.139,1.138-1.139h2.15    c1.814,0,3.29,1.646,3.29,3.668v32.877c0,2.022-1.645,3.667-3.667,3.667H38.417c-0.49,0.518-1.843,1.868-1.908,1.934l-2.723,2.716    c-0.924,0.922-1.724,1.727-1.837,1.849C31.72,76.403,31.365,76.553,31.022,76.553z"/>  </g>  </svg>',
		maximizeLoudestOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px"    height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <g id="Layer_1">   <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"    />   <g>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0,0.759,0,1.466,0,2.206c0.736,0,1.44,0,2.172,0     c0-0.746,0-1.464,0-2.206C69.553,52.013,68.86,52.013,68.106,52.013z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0,0.756,0,1.46,0,2.191c0.737,0,1.442,0,2.167,0     c0-0.746,0-1.464,0-2.191C69.546,43.063,68.854,43.063,68.108,43.063z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0,0.763,0,1.465,0,2.171c0.742,0,1.447,0,2.165,0     c0-0.735,0-1.439,0-2.171C69.556,47.56,68.851,47.56,68.12,47.56z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M38.971,54.247c0,0,0,1.017,0,1.485     c-0.001,1.94-0.003,3.882-0.003,5.822c0,1.295,0.347,1.638,1.653,1.635c0.173,0,0.347,0,0.595,0c0-0.217,0-0.402,0-0.589     c0.002-1.625-0.009-3.251,0.011-4.877c0.011-0.93,0.768-1.474,1.539-1.139c0.448,0.195,0.675,0.566,0.678,1.036     c0.012,2.22,0.019,4.44-0.002,6.661c-0.007,0.707-0.457,1.112-1.181,1.133c-0.716,0.021-1.434,0.026-2.15,0     c-1.998-0.068-3.357-1.459-3.37-3.464c-0.016-2.36-0.004-4.721-0.004-7.081c0-0.188,0-0.376,0-0.628     c-1.301,0.052-2.527-0.028-3.492-0.992c-0.957-0.957-1.042-2.163-0.985-3.488c-0.355,0-0.679,0.009-1.003-0.002     c-0.727-0.025-1.218-0.473-1.228-1.103c-0.009-0.626,0.482-1.09,1.202-1.121c0.312-0.013,0.624-0.002,0.986-0.002     c0.026-0.487,0.027-0.936,0.078-1.378c0.213-1.887,1.545-3.089,3.453-3.104c1.958-0.016,3.916,0.002,5.874-0.016     c0.283-0.002,0.59-0.076,0.844-0.202c3.769-1.87,7.537-3.74,11.29-5.641c1.166-0.59,2.364-0.927,3.675-0.867     c0.575,0.026,1.154-0.008,1.73,0.013c1.151,0.044,2.08,0.823,2.146,1.968c0.091,1.55,0.05,3.109,0.063,4.664     c0.004,0.381,0,0.763,0,1.187c1.535,0.085,2.763,0.698,3.643,1.922c0.564,0.789,0.835,1.682,0.807,2.659     c-0.067,2.354-1.503,3.799-4.45,4.43c0,0.682,0,1.376,0,2.071c0,1.084,0.01,2.168-0.004,3.252     c-0.018,1.542-0.914,2.448-2.448,2.465c-1.063,0.012-2.137,0.065-3.189-0.051c-0.578-0.064-1.136-0.411-1.679-0.68     c-3.751-1.866-7.499-3.739-11.239-5.627c-0.499-0.253-0.993-0.384-1.552-0.36C40.524,54.24,38.971,54.247,38.971,54.247z      M59.08,38.572c-1.33,0.029-2.648-0.199-3.884,0.417c-3.812,1.902-7.623,3.806-11.425,5.727c-0.152,0.077-0.304,0.33-0.306,0.503     c-0.02,2.272-0.009,4.546-0.019,6.818c-0.001,0.277,0.07,0.433,0.334,0.563c3.487,1.731,6.968,3.476,10.452,5.216     c0.113,0.057,0.244,0.084,0.415,0.142c0-0.24,0-0.413,0-0.587c0.002-4.982,0.002-9.966,0.005-14.949     c0-0.226-0.002-0.456,0.033-0.68c0.077-0.514,0.488-0.876,1.001-0.908c0.525-0.033,0.973,0.253,1.113,0.762     c0.068,0.248,0.078,0.517,0.078,0.776c0.006,5.229,0.004,10.456,0.004,15.684c0,0.204,0,0.407,0,0.615c0.773,0,1.48,0,2.199,0     C59.08,51.965,59.08,45.294,59.08,38.572z M41.151,45.345c-0.077-0.026-0.125-0.057-0.174-0.058     c-1.748-0.004-3.497-0.024-5.245,0.001c-0.825,0.012-1.218,0.463-1.224,1.313c-0.01,1.329-0.003,2.657,0.002,3.986     c0.004,1.012,0.385,1.4,1.386,1.405c1.451,0.005,2.902,0.001,4.353,0.001c0.291,0,0.583,0,0.901,0     C41.151,49.73,41.151,47.537,41.151,45.345z M61.394,50.833c1.271-0.031,2.218-1.014,2.195-2.234     c-0.023-1.203-1.011-2.181-2.195-2.143C61.394,47.9,61.394,49.345,61.394,50.833z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.106,52.013c0.754,0,1.446,0,2.172,0c0,0.742,0,1.46,0,2.206     c-0.731,0-1.436,0-2.172,0C68.106,53.479,68.106,52.771,68.106,52.013z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.108,43.063c0.746,0,1.438,0,2.167,0c0,0.728,0,1.446,0,2.191     c-0.725,0-1.43,0-2.167,0C68.108,44.523,68.108,43.818,68.108,43.063z"/>    <path fill-rule="evenodd" clip-rule="evenodd" fill="#FFFFFF" d="M68.12,47.56c0.73,0,1.436,0,2.165,0c0,0.732,0,1.437,0,2.171     c-0.718,0-1.423,0-2.165,0C68.12,49.025,68.12,48.323,68.12,47.56z"/>    <path fill="#FFFFFF" d="M26.444,69.789c-0.091,0-0.184-0.012-0.277-0.035l-0.79-0.197c-0.805-0.201-1.595-0.945-1.878-1.769     c-0.256-0.744-0.35-2.642-0.35-3.735V33.115c0-2.022,1.646-3.668,3.667-3.668h40.061c0.629,0,1.138,0.51,1.138,1.139     c0,0.628-0.509,1.138-1.138,1.138H26.817c-0.767,0-1.391,0.624-1.391,1.392v30.938c0,1.507,0.147,2.752,0.227,2.997     c0.032,0.093,0.199,0.267,0.292,0.303l0.775,0.193c0.61,0.152,0.981,0.771,0.828,1.38C27.418,69.443,26.955,69.789,26.444,69.789z     "/>    <path fill="#FFFFFF" d="M31.022,76.553c-0.122,0-0.242-0.019-0.354-0.059c-0.481-0.172-0.792-0.638-0.792-1.184v-6.789     c0-0.629,0.509-1.138,1.138-1.138c0.628,0,1.138,0.509,1.138,1.138v4.201c0.008-0.009,0.017-0.018,0.026-0.026l2.723-2.715     c1.087-1.085,1.833-1.849,1.933-1.961c0.121-0.145,0.587-0.637,1.224-0.637h35.125c0.768,0,1.392-0.624,1.392-1.392V33.115     c0-0.741-0.475-1.392-1.015-1.392h-2.15c-0.629,0-1.138-0.509-1.138-1.138c0-0.629,0.509-1.139,1.138-1.139h2.15     c1.814,0,3.29,1.646,3.29,3.668v32.877c0,2.022-1.645,3.667-3.667,3.667H38.417c-0.49,0.518-1.843,1.868-1.908,1.934l-2.723,2.716     c-0.924,0.922-1.724,1.727-1.837,1.849C31.72,76.403,31.365,76.553,31.022,76.553z"/>   </g>  </g>  <g id="Layer_3">  </g>  </svg>',
		staticMaximizeOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"     viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M73.238,74.392h-21.52c-0.663,0-1.2-0.537-1.2-1.2s0.537-1.2,1.2-1.2h20.319V30.007H29.97v20.111     c0,0.663-0.538,1.2-1.2,1.2s-1.2-0.537-1.2-1.2V28.807c0-0.663,0.538-1.2,1.2-1.2h44.468c0.663,0,1.2,0.538,1.2,1.2v44.384     C74.438,73.854,73.901,74.392,73.238,74.392z"/>   </g>   <g>    <path fill="#FFFFFF" d="M49.758,53.38c-0.307,0-0.614-0.117-0.849-0.352c-0.469-0.469-0.468-1.229,0-1.697l14.785-14.776     c0.47-0.469,1.229-0.468,1.697,0c0.469,0.469,0.469,1.229,0,1.697L50.606,53.028C50.372,53.263,50.065,53.38,49.758,53.38z"/>   </g>   <g>    <path fill="#FFFFFF" d="M65.046,48.662c-0.663,0-1.2-0.538-1.2-1.2v-9.359h-9.359c-0.663,0-1.2-0.538-1.2-1.2s0.537-1.2,1.2-1.2     h10.56c0.663,0,1.2,0.538,1.2,1.2v10.56C66.246,48.124,65.709,48.662,65.046,48.662z"/>   </g>   <g>    <path fill="#FFFFFF" d="M44.989,74.392H28.77c-0.663,0-1.2-0.537-1.2-1.2V56.982c0-0.663,0.538-1.2,1.2-1.2h16.219     c0.663,0,1.2,0.537,1.2,1.2v16.209C46.189,73.854,45.651,74.392,44.989,74.392z M29.97,71.991h13.818V58.183H29.97V71.991z"/>   </g>  </g>  </svg>',
		staticMaximizeOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <g>   <g>    <path fill="#FFFFFF" d="M73.238,74.392h-21.52c-0.663,0-1.2-0.537-1.2-1.2s0.537-1.2,1.2-1.2h20.319V30.007H29.97v20.111     c0,0.663-0.538,1.2-1.2,1.2s-1.2-0.537-1.2-1.2V28.807c0-0.663,0.538-1.2,1.2-1.2h44.468c0.663,0,1.2,0.538,1.2,1.2v44.384     C74.438,73.854,73.901,74.392,73.238,74.392z"/>   </g>   <g>    <path fill="#FFFFFF" d="M49.758,53.38c-0.307,0-0.614-0.117-0.849-0.352c-0.469-0.469-0.468-1.229,0-1.697l14.785-14.776     c0.47-0.469,1.229-0.468,1.697,0c0.469,0.469,0.469,1.229,0,1.697L50.606,53.028C50.372,53.263,50.065,53.38,49.758,53.38z"/>   </g>   <g>    <path fill="#FFFFFF" d="M65.046,48.662c-0.663,0-1.2-0.538-1.2-1.2v-9.359h-9.359c-0.663,0-1.2-0.538-1.2-1.2s0.537-1.2,1.2-1.2     h10.56c0.663,0,1.2,0.538,1.2,1.2v10.56C66.246,48.124,65.709,48.662,65.046,48.662z"/>   </g>   <g>    <path fill="#FFFFFF" d="M44.989,74.392H28.77c-0.663,0-1.2-0.537-1.2-1.2V56.982c0-0.663,0.538-1.2,1.2-1.2h16.219     c0.663,0,1.2,0.537,1.2,1.2v16.209C46.189,73.854,45.651,74.392,44.989,74.392z M29.97,71.991h13.818V58.183H29.97V71.991z"/>   </g>  </g>  </svg>',
		facebooklogo: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#1877F2" d="M50,0C22.3857422,0,0,22.3857422,0,50c0,25.6513672,19.3173828,46.7910156,44.1982422,49.6660156   c0-11.5039063,0-23.0068359,0-34.5107422c-4.2099609-0.03125-8.5439453,0.0625-12.6748047-0.046875   c0.03125-4.7861328-0.0625-9.6972656,0.0458984-14.4052734c4.2099609,0,8.4189453,0,12.6289063,0   c0.1933594-5.2246094-0.3769531-10.6503906,0.2802734-15.0605469c1.2792969-8.5859375,6.7324219-14.1972656,15.5751953-15.1542969   c4.7587891-0.5146484,9.7216797,0.1660156,14.171875,0.8427734c-0.03125,4.0683594,0.0615234,8.2626953-0.046875,12.2539063   c-2.7724609,0.0996094-5.40625-0.1748047-7.7646484,0.09375c-2.2597656,0.2558594-3.9492188,1.1113281-5.1445313,2.7119141   c-1.2519531,1.6767578-1.4501953,3.5166016-1.4501953,6.4082031c0,2.5195313,0,5.3271484,0,7.9042969   c4.5839844,0.03125,9.2919922-0.0625,13.7978516,0.046875c-0.734375,4.8164063-1.4101563,9.6894531-2.2451172,14.4052734   c-3.8505859,0-7.7011719,0-11.5527344,0c0,11.2939453,0,22.5869141,0,33.8808594C82.7314453,94.4726563,100,74.2529297,100,50   C100,22.3857422,77.6142578,0,50,0z"/>  <path fill="#FFFFFF" d="M71.3720703,65.1552734c0.8349609-4.7158203,1.5107422-9.5888672,2.2451172-14.4052734   c-4.5058594-0.109375-9.2138672-0.015625-13.7978516-0.046875c0-2.5771484,0-5.3847656,0-7.9042969   c0-2.8916016,0.1982422-4.7314453,1.4501953-6.4082031c1.1953125-1.6005859,2.8847656-2.4560547,5.1445313-2.7119141   c2.3583984-0.2685547,4.9921875,0.0058594,7.7646484-0.09375c0.1083984-3.9912109,0.015625-8.1855469,0.046875-12.2539063   c-4.4501953-0.6767578-9.4130859-1.3574219-14.171875-0.8427734c-8.8427734,0.9570313-14.2958984,6.5683594-15.5751953,15.1542969   c-0.6572266,4.4101563-0.0869141,9.8359375-0.2802734,15.0605469c-4.2099609,0-8.4189453,0-12.6289063,0   c-0.1083984,4.7080078-0.0146484,9.6191406-0.0458984,14.4052734c4.1308594,0.109375,8.4648438,0.015625,12.6748047,0.046875   c0,11.5039063,0,23.0068359,0,34.5107422C46.1015625,99.8867188,48.0371094,100,50,100   c3.3613281,0,6.6445313-0.3320313,9.8193359-0.9638672c0-11.2939453,0-22.5869141,0-33.8808594   C63.6708984,65.1552734,67.5214844,65.1552734,71.3720703,65.1552734z"/>  </svg> ',
		facebookLive: '<svg version="1.1"    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"    x="0px" y="0px" viewBox="-0.622 -0.182 162 63" enable-background="new -0.622 -0.182 162 63"    xml:space="preserve">  <defs>  </defs>  <path fill="#C12337" d="M148.646,61.641l7.711,0.001c2.387,0,4.322-1.279,4.324-2.857l0.004-55.919c0-1.578-1.936-2.857-4.322-2.858   h-7.711L77.966,0.001L70.253,0c-2.381,0-4.311,1.271-4.32,2.843L65.929,53.68l-0.004,5.102c0.006,1.574,1.938,2.853,4.322,2.853"/>  <path fill="#FFFFFF" d="M84.446,19.024h3.082v21.038h10.08v2.555H84.446V19.024z"/>  <path fill="#FFFFFF" d="M104.048,19.024v23.593h-3.082V19.024H104.048z"/>  <path fill="#FFFFFF" d="M114.548,42.617l-7.736-23.593h3.326l3.674,11.621c0.98,3.186,1.855,6.056,2.521,8.821h0.07   c0.664-2.73,1.609-5.705,2.695-8.786l3.99-11.656h3.254l-8.436,23.593H114.548z"/>  <path fill="#FFFFFF" d="M141.077,31.556h-9.135v8.507h10.221v2.555H128.86V19.024h12.777v2.556h-9.695v7.455h9.135V31.556z"/>  <path fill="#4272B9" d="M30.891,0.085C13.83,0.085,0,13.916,0,30.976c0,15.849,11.935,28.908,27.306,30.683   c0-7.105,0-14.213,0-21.321c-2.601-0.019-5.279,0.04-7.831-0.027c0.02-2.956-0.039-5.991,0.028-8.9c2.601,0,5.201,0,7.802,0   c0.12-3.228-0.233-6.58,0.173-9.305c0.79-5.305,4.159-8.771,9.622-9.363c2.94-0.318,6.007,0.103,8.756,0.521   c-0.019,2.514,0.038,5.105-0.029,7.571c-1.713,0.061-3.34-0.108-4.796,0.058c-1.396,0.158-2.441,0.687-3.18,1.676   c-0.772,1.036-0.896,2.172-0.896,3.959c0,1.557,0,3.291,0,4.883c2.833,0.019,5.742-0.039,8.525,0.029   c-0.454,2.976-0.87,5.986-1.387,8.898c-2.379,0-4.759,0-7.139,0c0,6.978,0,13.956,0,20.934   c14.156-2.818,24.825-15.312,24.825-30.295C61.781,13.916,47.951,0.085,30.891,0.085z"/>  <path fill="#FFFFFF" d="M44.095,40.338c0.517-2.912,0.933-5.923,1.387-8.898c-2.783-0.068-5.692-0.01-8.525-0.029   c0-1.592,0-3.327,0-4.883c0-1.787,0.124-2.923,0.896-3.959c0.738-0.989,1.783-1.518,3.18-1.676c1.456-0.166,3.083,0.003,4.796-0.058   c0.067-2.466,0.011-5.058,0.029-7.571c-2.749-0.417-5.815-0.838-8.756-0.521c-5.463,0.591-8.832,4.058-9.622,9.363   c-0.406,2.725-0.054,6.077-0.173,9.305c-2.601,0-5.201,0-7.802,0c-0.067,2.909-0.009,5.944-0.028,8.9   c2.552,0.067,5.229,0.009,7.831,0.027c0,7.108,0,14.216,0,21.321c1.176,0.137,2.372,0.208,3.584,0.208   c2.076,0,4.105-0.206,6.065-0.596c0-6.978,0-13.956,0-20.934C39.336,40.338,41.716,40.338,44.095,40.338z"/>  </svg>',
		dragIconOff: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#8C8C8C" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M66.508,39.37c-1.358,0-2.59,0.571-3.465,1.486l0.012-1.438c0.02-2.646-2.116-4.814-4.798-4.834   c-1.359,0-2.592,0.573-3.467,1.49l0.002-0.192c0.019-2.644-2.118-4.811-4.799-4.832c-1.359,0-2.59,0.572-3.466,1.487l0.089-11.674   c0.011-1.284-0.481-2.494-1.383-3.407c-0.899-0.911-2.099-1.418-3.417-1.428c-2.623,0-4.774,2.135-4.794,4.76l-0.261,34.258   l-4.639-2.011c-1.242-0.547-3.103-1.274-4.923-1.274c-1.11,0-2.106,0.265-2.972,0.793c-1.196,0.742-2.032,1.924-2.356,3.327   c-0.346,1.502-0.057,3.137,0.793,4.487l0.202,0.32l0.319,0.202c2.809,1.794,10.573,7.182,12.745,10.537   c3.75,5.805,9.523,8.656,17.651,8.718l0.227,0.001c0.001,0,0.002,0,0.003,0c16.4,0,17.334-13.387,17.354-16.07l0.151-19.873   C71.337,41.559,69.196,39.391,66.508,39.37z M38.697,58.021c0.136-0.089,0.219-0.239,0.22-0.402l0.281-36.814   c0.011-1.434,1.186-2.601,2.64-2.601c0.699,0.005,1.355,0.283,1.847,0.781c0.492,0.499,0.761,1.16,0.755,1.861l-0.201,26.45   c-0.005,0.835,0.671,1.52,1.518,1.525c0.836,0,1.521-0.674,1.528-1.503l0.086-11.492c0.011-1.434,1.188-2.6,2.641-2.6   c1.446,0.011,2.614,1.195,2.604,2.639l-0.087,11.491c-0.004,0.403,0.151,0.784,0.436,1.072c0.287,0.292,0.672,0.453,1.095,0.455   c0.833,0,1.514-0.675,1.518-1.503l0.063-8.017c0.01-1.436,1.185-2.603,2.638-2.603c0.702,0.005,1.359,0.282,1.85,0.78   c0.49,0.499,0.758,1.16,0.752,1.861l-0.077,10.096c-0.004,0.836,0.678,1.521,1.528,1.526c0.831,0,1.511-0.675,1.516-1.503   l0.042-5.372c0.011-1.435,1.186-2.602,2.642-2.602c1.451,0.012,2.624,1.197,2.613,2.642L68.99,64.059   c-0.018,2.323-0.833,13.913-15.182,13.912L53.6,77.97c-7.44-0.057-12.474-2.511-15.841-7.723   c-2.763-4.268-12.189-10.409-13.308-11.13c-0.501-0.844-0.668-1.84-0.459-2.748c0.192-0.834,0.683-1.532,1.38-1.965   c0.515-0.314,1.113-0.468,1.827-0.468c1.41,0,2.984,0.622,4.048,1.091l6.991,3.032C38.388,58.123,38.56,58.11,38.697,58.021z"/>  </svg> ',
		dragIconOn: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">  <path fill="#4AAA4E" d="M50,0C22.431,0,0,22.431,0,50c0,27.57,22.429,50,50,50c27.57,0,50-22.43,50-50C100,22.432,77.568,0,50,0z"/>  <path fill="#FFFFFF" d="M66.508,39.37c-1.358,0-2.59,0.571-3.465,1.486l0.012-1.438c0.02-2.646-2.116-4.814-4.798-4.834   c-1.359,0-2.592,0.573-3.467,1.49l0.002-0.192c0.019-2.644-2.118-4.811-4.799-4.832c-1.359,0-2.59,0.572-3.466,1.487l0.089-11.674   c0.011-1.284-0.481-2.494-1.383-3.407c-0.899-0.911-2.099-1.418-3.417-1.428c-2.623,0-4.774,2.135-4.794,4.76l-0.261,34.258   l-4.639-2.011c-1.242-0.547-3.103-1.274-4.923-1.274c-1.11,0-2.106,0.265-2.972,0.793c-1.196,0.742-2.032,1.924-2.356,3.327   c-0.346,1.502-0.057,3.137,0.793,4.487l0.202,0.32l0.319,0.202c2.809,1.794,10.573,7.182,12.745,10.537   c3.75,5.805,9.523,8.656,17.651,8.718l0.227,0.001c0.001,0,0.002,0,0.003,0c16.4,0,17.334-13.387,17.354-16.07l0.151-19.873   C71.337,41.559,69.196,39.391,66.508,39.37z M38.697,58.021c0.136-0.089,0.219-0.239,0.22-0.402l0.281-36.814   c0.011-1.434,1.186-2.601,2.64-2.601c0.699,0.005,1.355,0.283,1.847,0.781c0.492,0.499,0.761,1.16,0.755,1.861l-0.201,26.45   c-0.005,0.835,0.671,1.52,1.518,1.525c0.836,0,1.521-0.674,1.528-1.503l0.086-11.492c0.011-1.434,1.188-2.6,2.641-2.6   c1.446,0.011,2.614,1.195,2.604,2.639l-0.087,11.491c-0.004,0.403,0.151,0.784,0.436,1.072c0.287,0.292,0.672,0.453,1.095,0.455   c0.833,0,1.514-0.675,1.518-1.503l0.063-8.017c0.01-1.436,1.185-2.603,2.638-2.603c0.702,0.005,1.359,0.282,1.85,0.78   c0.49,0.499,0.758,1.16,0.752,1.861l-0.077,10.096c-0.004,0.836,0.678,1.521,1.528,1.526c0.831,0,1.511-0.675,1.516-1.503   l0.042-5.372c0.011-1.435,1.186-2.602,2.642-2.602c1.451,0.012,2.624,1.197,2.613,2.642L68.99,64.059   c-0.018,2.323-0.833,13.913-15.182,13.912L53.6,77.97c-7.44-0.057-12.474-2.511-15.841-7.723   c-2.763-4.268-12.189-10.409-13.308-11.13c-0.501-0.844-0.668-1.84-0.459-2.748c0.192-0.834,0.683-1.532,1.38-1.965   c0.515-0.314,1.113-0.468,1.827-0.468c1.41,0,2.984,0.622,4.048,1.091l6.991,3.032C38.388,58.123,38.56,58.11,38.697,58.021z"/>  </svg> '
	}

	var ua=navigator.userAgent;
	var _isiOS = false;
	var _isAndroid = false;
	var _isiOSCordova = false;
	var _isAndroidCordova = false;
	if(ua.indexOf('iPad')!=-1||ua.indexOf('iPhone')!=-1||ua.indexOf('iPod')!=-1) _isiOS = true;
	if(ua.indexOf('Android')!=-1) _isAndroid = true;
	if(typeof cordova != 'undefined' && _isiOS) _isiOSCordova = true;
	if(typeof cordova != 'undefined' && _isAndroid) _isAndroidCordova = true;

	function copyToClipboard(el) {
		if(Q.info.platform === 'ios') {
			var oldContentEditable = el.contentEditable,
				oldReadOnly = el.readOnly,
				range = document.createRange();

			el.contentEditable = true;
			el.readOnly = false;
			range.selectNodeContents(el);

			var s = window.getSelection();
			s.removeAllRanges();
			s.addRange(range);

			el.setSelectionRange(0, 999999); // A big number, to cover anything that could be inside the element.

			el.contentEditable = oldContentEditable;
			el.readOnly = oldReadOnly;

			document.execCommand('copy');
			return;
		}
		var tempEl = document.createElement('textarea');
		tempEl.value = el.value || el.innerText;
		tempEl.setAttribute('readonly', '');
		tempEl.style.position = 'absolute';
		tempEl.style.left = '-9999px';
		document.body.appendChild(tempEl);
		var selected =
			document.getSelection().rangeCount > 0
				? document.getSelection().getRangeAt(0)
				: false;
		tempEl.select();
		document.execCommand('copy');
		document.body.removeChild(tempEl);
		if (selected) {
			document.getSelection().removeAllRanges();
			document.getSelection().addRange(selected);
		}
	};

	/**
	 * Streams/webrtc/control tool.
	 * Users can chat with each other via WebRTC using Twilio or raw streams
	 * @module Streams
	 * @class Streams webrtc
	 * @constructor
	 * @param {Object} options
	 *  Hash of possible options
	 */
	Q.Tool.define("Streams/webrtc/controls", function(options) {

			if (!options.webRTClibraryInstance || !options.webrtcClass) {
				throw "Video room should be created";
			}

			this.state = Q.extend({}, this.state, options);
			this.WebRTCLib = options.webRTClibraryInstance;
			this.WebRTCClass = options.webrtcClass;

			this.refresh();

			this.state.onCreate.handle.call(this);

		},

		{
			editable: false,
			onCreate: new Q.Event(),
			onUpdate: new Q.Event(),
			onRefresh: new Q.Event(),
			dialogIsOpened: false,
			loudestMode: false
		},

		{
			refresh: function() {
				var tool = this;
				tool.textes = tool.WebRTCClass.textes();
				var controlBar = tool.createControlBar();

				window.WebRTCcontrolBar = controlBar;
				tool.updateControlBar();

				tool.element.appendChild(controlBar);

				tool.textChat().init();
				tool.createSettingsPopup();
				tool.participantsPopup().createList();
				tool.initFbLiveInterface();
				window.fbLiveInterface = tool.fbLiveInterface;
				var activeViewMode = tool.state.webrtcClass.screenRendering.getActiveViewMode();
				if(activeViewMode == 'maximized' || activeViewMode == 'maximizedMobile') {
					tool.participantsPopup().toggleLoudesScreenMode('allButMe');
				}
				tool.participantsPopup().checkActiveMediaTracks();
				tool.bindRTCEvents();

			},

			/**
			 * Bind WebRTCconference events to update controls UI
			 * @method bindRTCEvents
			 */
			bindRTCEvents: function() {
				var tool = this;

				function setRealName(participant, callback) {
					var userId = participant.identity != null ? participant.identity.split('\t')[0] : null;

					if (userId != null) {
						var firstName;
						var lastName;
						var fullName = '';
						Q.Streams.get(userId, 'Streams/user/firstName', function () {
							firstName = this.fields.content;

							Q.Streams.get(userId, 'Streams/user/lastName', function () {
								lastName = this.fields.content;
							});

							if (firstName != null) {
								fullName += firstName;
							}
							if (lastName != null) {
								fullName += ' ' + lastName;
							}

							participant.username = fullName;

							if (callback != null) callback({firstName: firstName, lastName: lastName});

						});
					}
				}
				tool.WebRTCLib.event.on('participantConnected', function (participant) {
					setRealName(participant, function(name){
						tool.participantsPopup().addItem(participant);
					});

					var participants = tool.WebRTCLib.roomParticipants();
					for (var i in participants) {
						if(participants[i].soundMeter.visualizations.participantsPopup != null) participants[i].soundMeter.visualizations.participantsPopup.reset();
					}

					var participantsCount = tool.WebRTCLib.roomParticipants().length;
					tool.usersCounter.innerHTML = participantsCount;

				});
				tool.WebRTCLib.event.on('participantDisconnected', function (participant) {
					tool.participantsPopup().removeItem(participant);
					var participantsCount = tool.WebRTCLib.roomParticipants().length;
					tool.usersCounter.innerHTML = participantsCount;
				});
				tool.WebRTCLib.event.on('screenAdded', function (e) {
					tool.participantsPopup().update(e.participant);
				});
				tool.WebRTCLib.event.on('screenRemoved', function (e) {
					tool.participantsPopup().update(e.participant);
				});
				tool.WebRTCLib.event.on('trackAdded', function () {
					tool.updateControlBar();
				});
				tool.WebRTCLib.event.on('cameraEnabled', function () {
					tool.updateControlBar();
				});
				tool.WebRTCLib.event.on('cameraToggled', function () {
					tool.updateControlBar();
				});
				tool.WebRTCLib.event.on('micEnabled', function () {
					tool.updateControlBar();
					if(tool.microphoneBtn.classList.contains('Q_working')) tool.microphoneBtn.classList.remove('Q_working');
				});
				tool.WebRTCLib.event.on('micIsBeingEnabled', function () {
					tool.microphoneBtn.classList.add('Q_working')
					setTimeout(function () {
						if(tool.microphoneBtn.classList.contains('Q_working')) tool.microphoneBtn.classList.remove('Q_working');
					}, 10000);
				});
				tool.WebRTCLib.event.on('deviceListUpdated', function () {
					tool.loadCamerasList();
				});

				tool.WebRTCLib.event.on('facebookLiveStreamingStarted', function (participant) {
					if(participant.isLocal) {
						if (!tool.cameraBtn.classList.contains('isRecording')) tool.cameraBtn.classList.add('isRecording');
						tool.WebRTCClass.notice.show(Q.getObject("webrtc.notices.youBeganFbLive", tool.textes));

					} else {
						if (!tool.usersBtn.classList.contains('isRecording')) tool.usersBtn.classList.add('isRecording');
						tool.WebRTCClass.notice.show(tool.textes.webrtc.notices.sbBeganFbLive.interpolate({userName: participant.username}));
					}

					tool.participantsPopup().showFbLiveIndicator(participant);
				});
				tool.WebRTCLib.event.on('facebookLiveStreamingEnded', function (participant) {
					if(document.querySelector('.Streams_webrtc_fblive_dialog_inner') != null) {
						Q.Dialogs.pop();
					}
					if(participant.isLocal) {
						tool.cameraBtn.classList.remove('isRecording');
						tool.WebRTCClass.notice.show(Q.getObject("webrtc.notices.youStoppedFbLive", tool.textes));
					} else {
						tool.usersBtn.classList.remove('isRecording');
						tool.WebRTCClass.notice.show(tool.textes.webrtc.notices.sbStoppedFbLive.interpolate({userName: participant.username}));

					}

					tool.participantsPopup().hideFbLiveIndicator(participant);
				});

				var roomStream = tool.WebRTCClass.roomStream();

				Q.Streams.onMessageUnseen.add(function (stream, message) {

					if(stream.fields.name != roomStream.fields.name || stream.fields.publisherId != roomStream.fields.publisherId) return;

					if(tool.textChat.isHidden) {
						var msgCounterBadge = tool.newMessagesCounter.parentNode;
						if(msgCounterBadge.classList.contains('Streams_webrtc_hidden')) msgCounterBadge.classList.remove('Streams_webrtc_hidden');
					}

				}, tool);

			},

			showIosPermissionsInstructions: function(kind) {
					var instructionsPermissionDialog = document.createElement('DIV');
					instructionsPermissionDialog.className = 'Streams_webrtc_devices_dialog_inner';
					var dialogList = document.createElement('OL');
					dialogList.className = 'Streams_webrtc_instructions_dialog';
					dialogList.innerHTML = `<div>Permission for ` + kind + ` denied. To use it please follow these steps:</div><li>Go to your iOS Settings</li>
									<li>Open "Privacy"</li>
									<li>Find "` + kind + `" and open it</li>
									<li>Find "` + Q.Users.communityName + `" and enable</li>`;
					instructionsPermissionDialog.appendChild(dialogList);
					Q.Dialogs.push({
						title: 'Instructions',
						className: 'Streams_webrtc_devices_dialog',
						content: instructionsPermissionDialog,
						apply: true
					});
			},

			showAndroidPermissionsInstructions: function(kind) {
					var instructionsPermissionDialog = document.createElement('DIV');
					instructionsPermissionDialog.className = 'Streams_webrtc_devices_dialog_inner';
					var dialogList = document.createElement('OL');
					dialogList.className = 'Streams_webrtc_instructions_dialog';
					dialogList.innerHTML = `<div>Permission for ` + kind + ` denied. To use it please follow these steps:</div><li>Go to your Android Settings</li>
									<li>Open "Apps & notifications"</li>
									<li>Find "` + (Q.Users.communityName) + `" and open it</li>
									<li>Tap on Permissions</li>
									<li>Enable ` + kind + `</li>`;
					instructionsPermissionDialog.appendChild(dialogList);
					Q.Dialogs.push({
						title: 'Instructions',
						className: 'Streams_webrtc_devices_dialog',
						content: instructionsPermissionDialog,
						apply: true
					});
			},
			showBrowserPermissionsInstructions: function(kind) {
				var instructionsPermissionDialog = document.createElement('DIV');
				instructionsPermissionDialog.className = 'Streams_webrtc_devices_dialog_inner';
				var dialogList = document.createElement('OL');
				dialogList.className = 'Streams_webrtc_instructions_dialog';
				dialogList.innerHTML = `<div>Permission for ` + kind + ` denied. To use it please follow these steps:</div><li>Reload this page</li>
									<li>` + (Q.info.isTouchscreen ? 'Tap' : 'Click') + ` "Allow" when dialogue will appear asking for access to your ` + kind + `</li>`;
				instructionsPermissionDialog.appendChild(dialogList);
				Q.Dialogs.push({
					title: 'Instructions',
					className: 'Streams_webrtc_devices_dialog',
					content: instructionsPermissionDialog,
					apply: true
				});
			},

			cameraButtonHandler: function() {
				var tool = this;
				if(!Q.info.isMobile && !Q.info.isTablet) return;

				if(_isAndroidCordova && !tool.cameraPermissionGranted) {
					tool.WebRTCLib.conferenceControl.requestAndroidMediaPermissions({video: true}, function(){
						tool.cameraPermissionGranted = true;
						tool.cameraButtonHandler();
					}, function () {
						tool.showAndroidPermissionsInstructions('Camera');
					});
					return;
				}

				var enabledVideoTracks = tool.WebRTCLib.localParticipant().tracks.filter(function (t) {
					return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
				}).length;

				if(tool.WebRTCLib.conferenceControl.frontCameraDevice() == null && enabledVideoTracks == 0 && tool.WebRTCLib.localParticipant().videoStream == null && !(typeof cordova != 'undefined' && window.device.platform === 'iOS')) {
					tool.WebRTCLib.conferenceControl.requestCamera(function () {
						var currentCamera = tool.WebRTCLib.conferenceControl.frontCameraDevice();
						if(currentCamera != null && tool.settingsPopupEl != null) {
							var labelToSelect = tool.settingsPopupEl.querySelector('label[data-device-id="' + currentCamera.deviceId + '"]');
							if(labelToSelect != null) {
								tool.toggleCameraButtons(labelToSelect)
							} else {
								var labelToSelect = tool.settingsPopupEl.querySelector('label[data-device-id="off"]');
								if(labelToSelect != null) tool.toggleCameraButtons(labelToSelect);
							}

							var turnOnCameraItem = tool.settingsPopupEl.querySelector('label[data-device-id="auto"]');

							if(turnOnCameraItem != null && turnOnCameraItem.parentNode != null) turnOnCameraItem.parentNode.removeChild(turnOnCameraItem);
							tool.loadCamerasList();
						}
						tool.updateControlBar();
					}, function (e) {

						var participant = tool.WebRTCLib.localParticipant();
						var enabledVideoTracks = participant.tracks.filter(function (t) {
							return t.screensharing;
						})[0];

						var turnOffradioBtnItem = tool.settingsPopupEl.querySelector('label[data-device-id="off"]');
						var screenSharingRadioItem = tool.settingsPopupEl.querySelector('label[data-device-id="screen"]');

						if(enabledVideoTracks != null)
							tool.toggleCameraButtons(screenSharingRadioItem);
						else tool.toggleCameraButtons(turnOffradioBtnItem);

						tool.updateControlBar();
						if(_isiOSCordova)
							tool.showIosPermissionsInstructions('Camera');
						else if(e.name == 'NotAllowedError' || e.name == 'MediaStreamError') tool.showBrowserPermissionsInstructions('camera');

					});
					return;
				}
				if(document.querySelector('.dialog-box.select-camera') == null) {
					tool.selectCameraDialogue();
				}
			},

			/**
			 * Create control bar element
			 * @method bindRTCEvents
			 */
			createControlBar: function() {
				var tool = this;
				var controlBar = document.createElement('DIV');
				controlBar.className = 'Streams_webrtc_conference-control';
				var controlBarCon = document.createElement('DIV');
				controlBarCon.className = 'Streams_webrtc_conference-control-inner';
				var cameraBtnCon = document.createElement('DIV');
				cameraBtnCon.className = 'Streams_webrtc_camera-control';
				var cameraBtn = document.createElement('DIV');
				cameraBtn.className = 'Streams_webrtc_camera-control-btn';
				var cameraBtnIcon = document.createElement('DIV');
				cameraBtnIcon.className = 'Streams_webrtc_camera-control-icon';
				cameraBtnIcon.innerHTML = icons.disabledCamera;
				var cameraSwitcherBtnCon = document.createElement('DIV');
				cameraSwitcherBtnCon.className = 'Streams_webrtc_camera-switcher';
				var cameraSwitcherBtn = document.createElement('DIV');
				cameraSwitcherBtn.className = 'Streams_webrtc_camera-switcher-btn';
				cameraSwitcherBtn.innerHTML = icons.switchCameras;
				var speakerBtnCon = document.createElement('DIV');
				speakerBtnCon.className = 'Streams_webrtc_speaker-control';
				var speakerBtn = document.createElement('DIV');
				speakerBtn.className = 'Streams_webrtc_speaker-control-btn';
				speakerBtn.innerHTML = icons.enabledSpeaker;
				var microphoneBtnCon = document.createElement('DIV');
				microphoneBtnCon.className = 'Streams_webrtc_microphone-control';
				var microphoneBtn = document.createElement('DIV');
				microphoneBtn.className = 'Streams_webrtc_microphone-control-btn';
				microphoneBtn.innerHTML = icons.microphone;
				var textChatBtnCon = document.createElement('DIV');
				textChatBtnCon.className = 'Streams_webrtc_text-chat-btn';
				var textChatBtn = document.createElement('DIV');
				textChatBtn.className = 'Streams_webrtc_text-chat-btn-btn';
				var textChatBtnIcon = document.createElement('DIV');
				textChatBtnIcon.className = 'Streams_webrtc_text-chat-icon';
				textChatBtnIcon.innerHTML = icons.textChat;
				var textChatCounterBadge = document.createElement('DIV');
				textChatCounterBadge.className = 'Streams_webrtc_text-chat-counter Streams_webrtc_hidden';
				var textChatCounterBadgeSpan = document.createElement('SPAN');
				var usersBtnCon = document.createElement('DIV');
				usersBtnCon.className = 'Streams_webrtc_manage-users-btn';
				var usersBtn = document.createElement('DIV');
				usersBtn.className = 'Streams_webrtc_manage-users-btn-btn';
				var usersBtnIcon = document.createElement('DIV');
				usersBtnIcon.className = 'Streams_webrtc_manage-users-btn-icon';
				usersBtnIcon.innerHTML = icons.user;
				var counterBadge = document.createElement('DIV');
				counterBadge.className = 'Streams_webrtc_users-counter';
				var counterBadgeSpan = document.createElement('SPAN');
				var participantsCount = tool.WebRTCLib.roomParticipants().length;
				counterBadgeSpan.innerHTML = participantsCount;

				if(!Q.info.isMobile) {
					var screenSharingBtn = document.createElement('DIV');
					screenSharingBtn.className = 'Streams_webrtc_screen-sharing-btn';
					screenSharingBtn.innerHTML = icons.screen;
				}

				cameraBtnCon.appendChild(cameraBtn);
				cameraBtnCon.appendChild(cameraBtnIcon);
				controlBarCon.appendChild(cameraBtnCon);
				if(tool.WebRTCLib.conferenceControl.videoInputDevices.length > 1) { controlBarCon.appendChild(cameraSwitcherBtn);}
				if(typeof cordova != 'undefined' && Q.info.isMobile) controlBarCon.appendChild(speakerBtn);
				controlBarCon.appendChild(microphoneBtn);
				textChatBtnCon.appendChild(textChatBtn);
				textChatBtnCon.appendChild(textChatBtnIcon);
				textChatCounterBadge.appendChild(textChatCounterBadgeSpan);
				textChatBtnCon.appendChild(textChatCounterBadge);
				controlBarCon.appendChild(textChatBtnCon);
				usersBtnCon.appendChild(usersBtn);
				usersBtnCon.appendChild(usersBtnIcon);
				counterBadge.appendChild(counterBadgeSpan);
				usersBtnCon.appendChild(counterBadge);
				controlBarCon.appendChild(usersBtnCon);
				controlBar.appendChild(controlBarCon);

				tool.controlBar = controlBar;
				tool.cameraBtn = cameraBtn;
				tool.cameraBtnIcon = cameraBtnIcon;
				tool.speakerBtn = speakerBtn;
				tool.microphoneBtn = microphoneBtn;
				tool.textChatBtn = textChatBtn;
				tool.usersBtn = usersBtn;
				tool.usersBtnIcon = usersBtnIcon;
				tool.usersCounter = counterBadge;
				tool.newMessagesCounter = textChatCounterBadgeSpan;

				var roomStream = tool.WebRTCClass.roomStream();

				Q.Streams.Message.Total.setUpElement(textChatCounterBadgeSpan, roomStream.fields.publisherId, roomStream.fields.name, 'Streams/chat/message', tool);


				cameraBtn.addEventListener('touchend', function () {
					tool.cameraButtonHandler()
				})

				/*cameraSwitcherBtn.addEventListener('mouseup', function () {
					tool.toggleCameras();
				})*/
				speakerBtn.addEventListener('mouseup', function () {
					tool.toggleAudioOutputSpeaker();
				})
				microphoneBtn.addEventListener('mouseup', function () {
					tool.toggleAudio();
				})

				/*textChatBtnCon.addEventListener('mouseup', function () {
					tool.textChat.toggle();
				})*/

				return controlBar;
			},

			textChat: function() {
				var tool = this;
				function createPopup() {
					var dialogue=document.createElement('DIV');
					dialogue.className = 'dialog-box text-chat Streams_webrtc_hidden';

					var dialogTitle=document.createElement('H3');
					dialogTitle.innerHTML = 'Conference chat';
					dialogTitle.className = 'dialog-header Q_dialog_title';

					var dialogInner=document.createElement('DIV');
					dialogInner.className = 'dialog-inner';
					var chatBox=document.createElement('DIV');
					chatBox.className = 'Streams_webrtc_popup-chat-box  Streams_webrtc_popup-box';


					var close=document.createElement('div');
					close.className = 'close-dialog-sign';
					close.style.backgroundImage = 'url("' + Q.url("{{Q}}/img/close.png") + '"';
					close.style.backgroundRepeat = 'no-repeat';
					close.style.backgroundSize = 'cover';


					var chooseCameraList = document.createElement('DIV');
					chooseCameraList.className = 'choose-device';

					dialogInner.appendChild(dialogTitle);
					dialogInner.appendChild(chatBox);

					dialogue.appendChild(close);
					dialogue.appendChild(dialogInner);


					if(!Q.info.isMobile && !Q.info.isTablet) {
						tool.textChatBtn.parentNode.appendChild(chatBox);
					} else {
						tool.WebRTCClass.roomsMediaContainer().appendChild(dialogue);
						setTimeout(function () {
							Q.activate(
								Q.Tool.setUpElement(
									dialogue, // or pass an existing element
									"Q/resize",
									{
										movable: true,
										activateOnElement: dialogTitle,
										resizeByWheel: false,
										active: true
									}
								),
								{},
								function () {

								}
							);
						}, 3000)
					}

					var controlsRect = tool.controlBar.getBoundingClientRect();
					if(Q.info.isMobile) {
						dialogue.style.left = (window.innerWidth / 2) - (285 / 2) + 'px';
						dialogue.style.bottom = (controlsRect.height + 10) + 'px';
					} else {
						dialogue.style.left = (controlsRect.left + controlsRect.width + 15) + 'px';
					}


					close.addEventListener('click', function () {
						tool.textChat.hide();
					});

					tool.chatDialogue = chatBox;
					tool.chatBox = chatBox;

					tool.textChat = {
						chatDialogue: dialogue,
						chatBox: chatBox,
						static: false,
						isHidden: true,
						hide: function () {
							if(!this.chatDialogue.classList.contains('Streams_webrtc_hidden')){
								this.chatDialogue.classList.add('Streams_webrtc_hidden');
								this.isHidden = true;
								this.static = false;
								if(this.chatTool != null) this.chatTool.seen(false);
							}
						},
						show: function () {
							if(this.chatDialogue.classList.contains('Streams_webrtc_hidden')) {
								this.chatDialogue.classList.remove('Streams_webrtc_hidden');
								this.scrollToTheBottom();
								if(this.chatTool != null) this.chatTool.seen(true);

								this.isHidden = false;

								tool.newMessagesCounter.innerHTML = '0';
								var msgCounter = tool.newMessagesCounter.parentNode;

								var controlsRect = tool.controlBar.getBoundingClientRect();
								if(Q.info.isMobile) {
									dialogue.style.left = (window.innerWidth / 2) - (285 / 2) + 'px';
									dialogue.style.bottom = (controlsRect.height + 10) + 'px';
								} else {
									var winWidth = window.innerWidth;
									var availableSpace = winWidth - (controlsRect.left + controlsRect.width);
									if(availableSpace >= (285+15)) {
										dialogue.style.left = (controlsRect.left + controlsRect.width + 15) + 'px';
										dialogue.style.bottom = 0;

									} else {
										dialogue.style.left = (winWidth / 2) - (285 / 2) + 'px';
										dialogue.style.bottom = (controlsRect.height + 10) + 'px';
									}
								}

								if(!msgCounter.classList.contains('Streams_webrtc_hidden')) msgCounter.classList.add('Streams_webrtc_hidden');
							}
						},
						toggle: function () {
							if(this.isHidden) {
								this.show();
							} else this.hide();
						},
						scrollToTheBottom: function () {
							if(!Q.getObject(['textChat', 'chatTool', 'element'], tool)) return;
							tool.textChat.chatTool.element.scrollTop = tool.textChat.chatTool.element.scrollHeight;
						}
					}

				}

				function init() {
					createPopup();

					var initChat = function() {
						Q.activate(
							tool.chatBox.appendChild(
								Q.Tool.setUpElement(
									"div", // or pass an existing element
									"Streams/chat",
									{
										publisherId:tool.WebRTCClass.options().roomPublisherId,
										streamName:'Streams/webrtc/' + tool.WebRTCClass.options().roomId
									}
								)
							),
							{},
							function () {
								tool.textChat.chatTool = this;
								tool.textChat.chatTool.seen(true);

							}
						);
					}

					if(Q.info.isMobile || Q.info.isTablet) {

						tool.textChatBtn.addEventListener('click', function (e) {
							if(tool.textChat.chatTool == null) initChat();
							tool.textChat.toggle();
						});

					} else {
						tool.textChatBtn.addEventListener('mouseenter', function (e) {
							if(tool.textChat.chatTool == null) initChat();
							if (tool.hoverTimeout.textChatPopup != null) {
								clearTimeout(tool.hoverTimeout.textChatPopup);
								tool.hoverTimeout.textChatPopup = null;
							}
							tool.textChatBtn.parentNode.classList.add('Streams_webrtc_hover');
							tool.textChat.scrollToTheBottom();
							tool.textChat.isHidden = false;

							if(tool.textChat.chatTool != null) tool.textChat.chatTool.seen(true);
							var msgCounterBadge = tool.newMessagesCounter.parentNode;
							if(!msgCounterBadge.classList.contains('Streams_webrtc_hidden')) msgCounterBadge.classList.add('Streams_webrtc_hidden');

						});

						tool.textChatBtn.addEventListener('mouseleave', function (e) {
							if(tool.textChat.static) {
								return;
							}
							if (e.target == e.currentTarget || e.currentTarget.contains(e.eventTarget)) {
								e.stopPropagation();
								e.preventDefault();
							}
							tool.hoverTimeout.textChatPopup = setTimeout(function () {
								tool.textChatBtn.parentNode.classList.remove('Streams_webrtc_hover');
								tool.textChat.chatTool.seen(false);
								tool.textChat.isHidden = true;
							}, 400)
						});


						var makeStatic = function() {
							if (tool.hoverTimeout.textChatPopup != null) {
								clearTimeout(tool.hoverTimeout.textChatPopup);
								tool.hoverTimeout.textChatPopup = null;
							}
							tool.textChatBtn.parentNode.classList.add('Streams_webrtc_hover');
							tool.textChat.static = true;
						}

						var removeStatic = function (e) {
							if(tool.chatBox.contains(e.target) || tool.chatBox == e.target){
								return;
							}
							tool.textChatBtn.parentNode.classList.remove('Streams_webrtc_hover');
							tool.textChat.static = false;
							if(tool.textChat.chatTool != null) tool.textChat.chatTool.seen(false);
							tool.textChat.isHidden = true;
						}

						window.addEventListener('click', removeStatic);
						tool.chatBox.addEventListener('mouseup', makeStatic);

						tool.chatBox.addEventListener('mouseenter', function (e) {

							if(tool.hoverTimeout.textChatPopup != null) {
								clearTimeout(tool.hoverTimeout.textChatPopup);
								tool.hoverTimeout.textChatPopup = null;
							}
						})
						tool.chatBox.addEventListener('mouseleave', function (e) {
							if(tool.textChat.static) {
								return;
							}
							setTimeout(function () {
								tool.textChatBtn.parentNode.classList.remove('Streams_webrtc_hover');
								tool.textChat.chatTool.seen(false);
								tool.textChat.isHidden = true;
							}, 400)

						});
					}

				}

				return {
					init: init
				}
			},

			/**
			 * Turn on/off camera (all local video tracks)
			 * @method toggleVideo
			 */
			toggleVideo: function () {
				var tool = this;
				var videoInputDevices = tool.WebRTCLib.conferenceControl.videoInputDevices();

				if(tool.WebRTCLib.conferenceControl.cameraIsEnabled() && tool.WebRTCLib.conferenceControl.currentCameraDevice() == videoInputDevices[videoInputDevices.length-1]) {
					tool.WebRTCLib.conferenceControl.disableVideo();
				} else {
					if(!tool.WebRTCLib.conferenceControl.cameraIsEnabled()){
						tool.WebRTCLib.conferenceControl.enableVideo();
					}
					tool.WebRTCLib.conferenceControl.toggleCameras();

				}


				tool.participantsPopup().toggleLocalVideo();

				tool.updateControlBar();
			},

			/**
			 * Turn on/off microphone (local audio tracks)
			 * @method toggleAudio
			 */
			toggleAudio: function () {
				var tool = this;
				if(_isAndroidCordova && !tool.microphonePermissionGranted) {
					tool.WebRTCLib.conferenceControl.requestAndroidMediaPermissions({audio: true}, function(){
						tool.microphonePermissionGranted = true;
						tool.toggleAudio();
					}, function () {
						tool.showAndroidPermissionsInstructions('Microphone');
					});
					return;
				}
				var localParticipant = tool.WebRTCLib.localParticipant();
				var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
					return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
				}).length;

				if(tool.WebRTCLib.conferenceControl.micIsEnabled() && (enabledAudioTracks != 0 || localParticipant.audioStream != null)){
					tool.WebRTCLib.conferenceControl.disableAudio();
				} else {
					tool.WebRTCLib.conferenceControl.enableAudio(function (e) {
						if(_isiOSCordova)
							tool.showIosPermissionsInstructions('Microphone');
						else if(e.name == 'NotAllowedError' || e.name == 'MediaStreamError') tool.showBrowserPermissionsInstructions('microphone');
					});
				}

				tool.participantsPopup().toggleLocalAudio();
				tool.updateControlBar();
			},

			/**
			 * Turn on/off microphone (local audio tracks)
			 * @method toggleAudio
			 */
			toggleAudioOutputSpeaker: function () {
				var tool = this;
				if(tool.WebRTCLib.conferenceControl.audioOutputMode().getCurrent() == 'speaker'){
					tool.WebRTCLib.conferenceControl.audioOutputMode().set('earpiece');
				} else {
					tool.WebRTCLib.conferenceControl.audioOutputMode().set('speaker');
				}
				tool.updateControlBar();
			},

			/**
			 * Turn on/off all participants' audio tracks
			 * @method toggleAudioOfAll
			 */
			toggleAudioOfAll: function () {
				var tool = this;
				if(tool.WebRTCLib.conferenceControl.speakerIsEnabled()){
					tool.WebRTCLib.conferenceControl.disableAudioOfAll();
				} else {
					tool.WebRTCLib.conferenceControl.enableAudioOfAll();
				}

				tool.updateControlBar();
			},

			/**
			 * Switch to another cameras (front/back)
			 * @method toggleCameras
			 */
			toggleCameras: function () {
				this.tool.WebRTCLib.conferenceControl.toggleCameras();
			},

			/**
			 * Update control buttons (active/inactive)
			 * @method updateControlBar
			 */
			updateControlBar: function () {
				var tool = this;
				if(tool.controlBar == null) return;
				var localParticipant = tool.WebRTCLib.localParticipant();
				var conferenceControl = tool.WebRTCLib.conferenceControl;

				var enabledVideoTracks = localParticipant.tracks.filter(function (t) {
					return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
				}).length;

				if(enabledVideoTracks == 0 && tool.WebRTCLib.localParticipant().videoStream == null) {
					tool.cameraBtnIcon.innerHTML = icons.disabledCamera;
				} else if(!conferenceControl.cameraIsEnabled()) {
					tool.cameraBtnIcon.innerHTML = icons.disabledCamera;
				} else if(conferenceControl.cameraIsEnabled()) {
					tool.cameraBtnIcon.innerHTML = icons.camera;
				}

				/*if (!conferenceControl.cameraIsEnabled()) {
					tool.speakerBtn.classList.remove('Streams_webrtc_hidden');
					tool.speakerBtn.innerHTML = conferenceControl.speakerIsEnabled() ? icons.enabledSpeaker : icons.disabledSpeaker;
				} else {
					tool.speakerBtn.classList.add('Streams_webrtc_hidden');
				}*/


				var enabledAud = localParticipant.audioTracks();
				var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
					return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
				}).length;

				if(enabledAudioTracks == 0 && tool.WebRTCLib.localParticipant().audioStream == null) {
					tool.microphoneBtn.innerHTML = icons.disabledMicrophone;
				} else if(!conferenceControl.micIsEnabled()) {
					tool.microphoneBtn.innerHTML = icons.disabledMicrophone;
				} else if(conferenceControl.micIsEnabled()) {
					tool.microphoneBtn.innerHTML = icons.microphone;
				}

				if(tool.WebRTCLib.conferenceControl.audioOutputMode().getCurrent() == 'speaker'){
					tool.speakerBtn.innerHTML = icons.enabledSpeaker;
				} else {
					tool.speakerBtn.innerHTML = icons.disabledSpeaker;
				}

			},

			/**
			 * Update butons for toggling view mode in participants popup
			 * @method updateControlBar
			 */
			updateViewModeBtns: function () {
				var tool = this;
				if(!tool.toggleViewBtns) return;
				var buttonsArr = tool.toggleViewBtns;
				var activeViewMode = tool.state.webrtcClass.screenRendering.getActiveViewMode();

				if(!activeViewMode || tool.WebRTCLib.screens().length == 0) return;
				var viewModeToApply;
				if(activeViewMode == 'minimized' || activeViewMode == 'maximized' || activeViewMode == 'maximizedMobile' || activeViewMode == 'minimizedMobile') {
					if(tool.state.loudestMode == 'all') {
						viewModeToApply = 'loudest';
					} else if(tool.state.loudestMode == 'allButMe') {
						viewModeToApply = 'loudestExceptMe';
					} else {
						viewModeToApply = 'maximizeStatic';
					}
				} else if(activeViewMode == 'tiled' || activeViewMode == 'tiledMobile') {
					viewModeToApply = 'tiledView';
				} else if(activeViewMode == 'regular') {
					viewModeToApply = 'floatingView';
				} else if(activeViewMode == 'manual') {
					viewModeToApply = 'manual';
				}

				for(var b in buttonsArr) {
					if(buttonsArr[b].viewMode == viewModeToApply) {
						buttonsArr[b].icon.innerHTML = buttonsArr[b].onIcon;
					} else buttonsArr[b].icon.innerHTML = buttonsArr[b].offIcon;
				}
			},
			selectCameraDialogue: function(){
				var tool = this;
				//self.closeAllDialogues();

				var bg=document.createElement('DIV');
				bg.className = 'dialog-bg';

				var dialogCon=document.createElement('DIV');
				dialogCon.className = 'dialog-con';
				dialogCon.addEventListener('click', function (e){
					e.stopPropagation();
					//if(e.currentTarget == e.target) self.closeAllDialogues();
				});

				var dialogue=document.createElement('DIV');
				dialogue.className = 'dialog-box select-camera';

				var dialogTitle=document.createElement('H3');
				dialogTitle.innerHTML = 'Select camera';
				dialogTitle.className = 'dialog-header Q_dialog_title';

				var dialogInner=document.createElement('DIV');
				dialogInner.className = 'dialog-inner';


				var close=document.createElement('div');
				close.className = 'close-dialog-sign';
				close.style.backgroundImage = 'url("' + Q.url("{{Q}}/img/apply.png") + '")';


				var chooseCameraList = document.createElement('DIV');
				chooseCameraList.className = 'choose-device';

				close.addEventListener('click', function () {
					if(bg.parentNode != null) bg.parentNode.removeChild(bg);
					if(dialogCon.parentNode != null) dialogCon.parentNode.removeChild(dialogCon);
					tool.state.dialogIsOpened = false;
				});

				dialogInner.appendChild(dialogTitle);
				dialogInner.appendChild(tool.settingsPopupEl);

				dialogue.appendChild(close);
				dialogue.appendChild(dialogInner);
				dialogCon.appendChild(dialogue)
				document.body.appendChild(dialogCon);
				document.body.appendChild(bg);

				var contentWidth = tool.settingsPopupEl.firstChild.scrollWidth;

				dialogue.style.minWidth = tool.settingsPopupEl.firstChild.scrollWidth + 'px';

				tool.state.dialogIsOpened = true;
			},
			/**
			 * Create settings popup that appears while pointer hovers camera button on desktop/in modal box on mobile
			 * @method createSettingsPopup
			 */
			createSettingsPopup: function () {
				var tool = this;

				var settingsPopup = document.createElement('DIV');
				settingsPopup.className = 'Streams_webrtc_popup-settings Streams_webrtc_popup-box';

				function toggleRadioButton(label) {
					var allItems = Array.prototype.slice.call(settingsPopup.querySelectorAll('label'));

					for(var i in allItems) {
						if(allItems[i] == label) continue;
						allItems[i].querySelector('input').checked = false;
						allItems[i].classList.remove('Streams_webrtc_disabled-radio');
					}

					if(typeof label == "undefined") return;

					if(!label.classList.contains('Streams_webrtc_disabled-radio')) label.classList.add('Streams_webrtc_disabled-radio');
					label.querySelector('input').checked = true;

					var shareScreenBtn = settingsPopup.querySelector('label[data-device-id="screen"] input');
					var anotherScreen = document.querySelector('.Streams_webrtc_video_anotherScreen');
					if(anotherScreen && label.dataset.deviceId == 'screen') {
						if(anotherScreen.classList.contains('Streams_webrtc_hidden')) anotherScreen.classList.remove('Streams_webrtc_hidden');
					} else if (anotherScreen){
						if(!anotherScreen.classList.contains('Streams_webrtc_hidden')) anotherScreen.classList.add('Streams_webrtc_hidden');
					}
				}
				tool.toggleCameraButtons = toggleRadioButton;

				var videoinputList = document.createElement('DIV');
				videoinputList.className = 'Streams_webrtc_choose-device'


				var turnOnCameraItem = document.createElement('LABEL');
				turnOnCameraItem.dataset.deviceId = 'auto';
				var radioBtn= document.createElement('INPUT');
				radioBtn.name = 'cameras';
				radioBtn.type = 'radio';
				radioBtn.value = 'camera';
				var textLabel = document.createTextNode(Q.getObject("webrtc.settingsPopup.webCamera", tool.textes));
				var checkmark = document.createElement('SPAN');
				checkmark.className = 'Streams_webrtc_radio-checkmark';
				checkmark.innerHTML = icons.screen;
				turnOnCameraItem.appendChild(radioBtn);
				turnOnCameraItem.appendChild(textLabel);
				turnOnCameraItem.appendChild(checkmark);
				videoinputList.appendChild(turnOnCameraItem);

				var screenSharingRadioItem = document.createElement('LABEL');
				screenSharingRadioItem.dataset.deviceId = 'screen';
				var radioBtn= document.createElement('INPUT');
				radioBtn.name = 'cameras';
				radioBtn.type = 'radio';
				radioBtn.value = 'screen';
				var textLabel = document.createTextNode(Q.getObject("webrtc.settingsPopup.screenSharing", tool.textes));
				var checkmark = document.createElement('SPAN');
				checkmark.className = 'Streams_webrtc_radio-checkmark';
				checkmark.innerHTML = icons.screen;
				screenSharingRadioItem.appendChild(radioBtn);
				screenSharingRadioItem.appendChild(textLabel);
				screenSharingRadioItem.appendChild(checkmark);
				if(!Q.info.isMobile && !Q.info.isTablet) videoinputList.appendChild(screenSharingRadioItem);

				var anotherScreenSharingRadioItem = document.createElement('LABEL');
				anotherScreenSharingRadioItem.className = 'Streams_webrtc_hidden Streams_webrtc_video_anotherScreen';
				anotherScreenSharingRadioItem.dataset.deviceId = 'anotherScreen';
				var radioBtn= document.createElement('INPUT');
				radioBtn.name = 'cameras';
				radioBtn.type = 'radio';
				radioBtn.value = 'screen';
				var textLabel = document.createTextNode(Q.getObject("webrtc.settingsPopup.shareAnotherScreen", tool.textes));
				var checkmark = document.createElement('SPAN');
				checkmark.className = 'Streams_webrtc_radio-checkmark';
				checkmark.innerHTML = icons.screen;
				anotherScreenSharingRadioItem.appendChild(radioBtn);
				anotherScreenSharingRadioItem.appendChild(textLabel);
				anotherScreenSharingRadioItem.appendChild(checkmark);
				if(!Q.info.isMobile && !Q.info.isTablet) videoinputList.appendChild(anotherScreenSharingRadioItem);

				var turnOffradioBtnItem = document.createElement('LABEL');
				turnOffradioBtnItem.dataset.deviceId = 'off';
				var radioBtn= document.createElement('INPUT');
				radioBtn.name = 'cameras';
				radioBtn.type = 'radio';
				radioBtn.value = 'off';
				var textLabel = document.createTextNode(Q.getObject("webrtc.settingsPopup.turnOffCameras", tool.textes));
				var checkmark = document.createElement('SPAN');
				checkmark.className = 'Streams_webrtc_radio-checkmark';
				checkmark.innerHTML = icons.switchOffCameras;
				turnOffradioBtnItem.appendChild(radioBtn);
				turnOffradioBtnItem.appendChild(textLabel);
				turnOffradioBtnItem.appendChild(checkmark);
				videoinputList.appendChild(turnOffradioBtnItem);

				var localParticipant = tool.WebRTCLib.localParticipant();
				var enabledVideoTracks = localParticipant.tracks.filter(function (t) {
					return t.kind == 'video' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
				}).length;
				if(enabledVideoTracks == 0 && localParticipant.videoStream == null) {
					toggleRadioButton(turnOffradioBtnItem);
				}

				function loadCamerasList () {
					var count = 1;
					var existingItems = videoinputList.querySelectorAll('input[data-camera="true"]');

					for(var c in existingItems) {
						if (typeof existingItems[c].parentNode != 'undefined') {
							var label = existingItems[c].parentNode;
							var itemValue = existingItems[c].value;

							if(itemValue != 'auto' && itemValue != 'screen' && itemValue != 'off') {
								if(label.parentNode) label.parentNode.removeChild(label);
							}
						}
					}

					tool.WebRTCLib.conferenceControl.videoInputDevices().forEach(function(mediaDevice){
						var radioBtnItem = document.createElement('LABEL');
						radioBtnItem.dataset.deviceId = mediaDevice.deviceId;
						var radioBtn= document.createElement('INPUT');
						radioBtn.name = 'cameras';
						radioBtn.type = 'radio';
						radioBtn.value = mediaDevice.deviceId;
						radioBtn.dataset.camera = true;

						var textLabel = document.createTextNode(mediaDevice.label || `Camera ${count  }`);
						var checkmark = document.createElement('SPAN');
						checkmark.className = 'Streams_webrtc_radio-checkmark';
						checkmark.innerHTML = icons.camera;
						radioBtnItem.appendChild(radioBtn);
						radioBtnItem.appendChild(textLabel);
						radioBtnItem.appendChild(checkmark);
						videoinputList.insertBefore(radioBtnItem, videoinputList.firstChild);

						if(tool.WebRTCLib.conferenceControl.currentCameraDevice() != null && tool.WebRTCLib.conferenceControl.currentCameraDevice().deviceId == mediaDevice.deviceId) {
							toggleRadioButton(radioBtnItem);
						}

						radioBtnItem.addEventListener('mouseup', function (e) {
							var checked = e.currentTarget.querySelector('input[name="cameras"]');
							toggleRadioButton(e.currentTarget);

							Q.Dialogs.pop();
							tool.closeAllDialogues();

							var cameraId = checked.value;
							if (cameraId != null) {
								tool.WebRTCLib.conferenceControl.toggleCameras(cameraId, function () {
									var localScreens = tool.WebRTCLib.localParticipant().screens;
									var i, screen;
									for (i = 0; screen = localScreens[i]; i++) {
										tool.state.webrtcClass.screenRendering.updateLocalScreenClasses(screen);
									}
									tool.updateControlBar();
								}, function (e) {
									if(_isiOSCordova) tool.showIosPermissionsInstructions('Camera');
								})
							}
						})
						count++;

						if(turnOnCameraItem.parentNode != null) turnOnCameraItem.parentNode.removeChild(turnOnCameraItem);

					});
				}
				tool.loadCamerasList = loadCamerasList;
				loadCamerasList();

				turnOnCameraItem.addEventListener('mouseup', function (e) {
					var label = e.currentTarget;
					toggleRadioButton(label);

					tool.WebRTCLib.conferenceControl.requestCamera(function () {
						var currentCamera = tool.WebRTCLib.conferenceControl.frontCameraDevice();
						if(currentCamera != null && tool.settingsPopupEl != null) {
							var labelToSelect = tool.settingsPopupEl.querySelector('label[data-device-id="' + currentCamera.deviceId + '"]');
							if(labelToSelect != null) {
								tool.toggleCameraButtons(labelToSelect)
							} else {
								var labelToSelect = tool.settingsPopupEl.querySelector('label[data-device-id="off"]');
								if(labelToSelect != null) tool.toggleCameraButtons(labelToSelect);
							}

							loadCamerasList();
						}
						tool.updateControlBar();
					}, function () {
						var participant = tool.WebRTCLib.localParticipant();
						var enabledVideoTracks = participant.tracks.filter(function (t) {
							return t.screensharing;
						})[0];
						if(enabledVideoTracks != null)
							toggleRadioButton(screenSharingRadioItem);
						else toggleRadioButton(turnOffradioBtnItem);

						tool.updateControlBar();
					});
				})

				var startScreenSharing = function (e) {
					var label = e.currentTarget;
					if(label.dataset.deviceId == 'screen') {
						toggleRadioButton(label);
					}
					tool.WebRTCLib.screenSharing.startShareScreen(function () {
						Q.Dialogs.pop();
						tool.closeAllDialogues();
						tool.updateControlBar();
						if(label.dataset.deviceId == 'anotherScreen') {
							var screenBtn = tool.settingsPopupEl.querySelector('label[data-device-id="screen"] input');
							screenBtn.checked = true;
						}

					}, function () {
						var currentCameraDevice = tool.WebRTCLib.conferenceControl.currentCameraDevice();
						var currentCameraId;
						if(currentCameraDevice != null)
							currentCameraId = currentCameraDevice.deviceId;
						else currentCameraId = 'off';
						var currentDevice = tool.settingsPopupEl.querySelector('label[data-device-id="' + currentCameraId + '"]');

						toggleRadioButton(currentDevice);
						tool.updateControlBar();
					})
				}
				screenSharingRadioItem.addEventListener('mouseup', startScreenSharing);
				anotherScreenSharingRadioItem.addEventListener('mouseup', startScreenSharing);

				turnOffradioBtnItem.addEventListener('mouseup', function (e) {
					toggleRadioButton(e.currentTarget);
					tool.WebRTCLib.conferenceControl.disableVideo();
					Q.Dialogs.pop();
					tool.closeAllDialogues();
					tool.updateControlBar();
				})

				settingsPopup.appendChild(videoinputList);

				var streamingAndUploading = document.createElement('DIV');
				streamingAndUploading.className = 'Streams_webrtc_streaming'


				var facebookLiveItem = document.createElement('DIV');
				facebookLiveItem.className = 'Streams_webrtc_streaming_item';
				var fbLivetextLabel = document.createElement('SPAN');
				fbLivetextLabel.innerHTML = Q.getObject("webrtc.settingsPopup.startFBLive", tool.textes);
				var fbLiveIcon = document.createElement('SPAN');
				fbLiveIcon.className = 'Streams_webrtc_streaming_icon';
				fbLiveIcon.innerHTML = icons.facebooklogo;
				facebookLiveItem.appendChild(fbLivetextLabel);
				facebookLiveItem.appendChild(fbLiveIcon);

				var fbStreamingSettings = document.createElement('DIV');
				fbStreamingSettings.className = 'Streams_webrtc_streaming_settings'

				var fbStreamingStartSettings = document.createElement('DIV');
				fbStreamingStartSettings.className = 'Streams_webrtc_streaming_start_settings'

				var facebookLiveTtle = document.createElement('LABEL');
				facebookLiveTtle.className = 'Streams_webrtc_streaming_title';

				var facebookLiveTtleInput = document.createElement('INPUT');
				facebookLiveTtleInput.type = 'text';
				facebookLiveTtleInput.placeholder = Q.getObject("webrtc.settingsPopup.fbLiveTitle", tool.textes);

				var facebookLiveDesc = document.createElement('LABEL');
				facebookLiveDesc.className = 'Streams_webrtc_streaming_desc';

				var facebookLiveDescInput = document.createElement('INPUT');
				facebookLiveDescInput.type = 'text';
				facebookLiveDescInput.placeholder = Q.getObject("webrtc.settingsPopup.fbLiveDescription", tool.textes);

				var startStreamingBtnCon = document.createElement('DIV');
				startStreamingBtnCon.className = 'Streams_webrtc_streaming_start';

				var privacySelect = document.createElement('SELECT');
				var option1 = document.createElement('OPTION');
				option1.innerHTML = Q.getObject("webrtc.settingsPopup.fbOnlyMeLiveAccess", tool.textes);
				option1.value = 'SELF';
				option1.selected = true;
				var option2 = document.createElement('OPTION');
				option2.innerHTML = Q.getObject("webrtc.settingsPopup.fbFriendsAccess", tool.textes);
				option2.value = 'ALL_FRIENDS';
				var option3 = document.createElement('OPTION');
				option3.value = 'EVERYONE';
				option3.innerHTML = Q.getObject("webrtc.settingsPopup.fbPublicAccess", tool.textes);

				var startStreamingBtn = document.createElement('BUTTON');
				startStreamingBtn.type = 'button';
				startStreamingBtn.className = 'Q_button';
				startStreamingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbStartLive", tool.textes);



				var fbStreamingLiveSection = document.createElement('DIV');
				fbStreamingLiveSection.style.display = 'none';
				fbStreamingLiveSection.className = 'Streams_webrtc_streaming_live';

				var facebookLiveEmbed = document.createElement('DIV');
				facebookLiveEmbed.className = "Streams_webrtc_streaming_url";

				var facebookLiveUrl = document.createElement('INPUT');
				facebookLiveUrl.type = 'text';
				tool.facebookLiveUrlInput = facebookLiveUrl;

				var facebookLiveCopy = document.createElement('DIV');
				facebookLiveCopy.className = 'Streams_webrtc_streaming_copy_url_btn';
				var facebookLiveCopyLink = document.createElement('SPAN');
				facebookLiveCopyLink.innerHTML = Q.getObject("webrtc.settingsPopup.copy", tool.textes);

				var buttonsCon = document.createElement('DIV');
				buttonsCon.className = 'Streams_webrtc_streaming_buttons';

				var getIframeBtnCon = document.createElement('DIV');
				getIframeBtnCon.className = 'Streams_webrtc_streaming_embed';

				var getIframeBtn = document.createElement('BUTTON');
				getIframeBtn.type = 'button';
				getIframeBtn.className = 'Q_button';
				getIframeBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbEmbedCode", tool.textes);

				var stopStreamingBtnCon = document.createElement('DIV');
				stopStreamingBtnCon.className = 'Streams_webrtc_streaming_stop';

				var stopStreamingBtn = document.createElement('BUTTON');
				stopStreamingBtn.type = 'button';
				stopStreamingBtn.className = 'Q_button';
				stopStreamingBtn.innerHTML = Q.getObject("webrtc.settingsPopup.fbStopLive", tool.textes);


				facebookLiveCopy.appendChild(facebookLiveCopyLink);
				facebookLiveEmbed.appendChild(facebookLiveUrl);
				facebookLiveEmbed.appendChild(facebookLiveCopy);
				streamingAndUploading.appendChild(facebookLiveItem);
				if(!tool.WebRTCClass.options().liveStreaming.startFbLiveViaGoLiveDialog) {
					facebookLiveTtle.appendChild(facebookLiveTtleInput);
					fbStreamingStartSettings.appendChild(facebookLiveTtle);
					facebookLiveDesc.appendChild(facebookLiveDescInput);
					fbStreamingStartSettings.appendChild(facebookLiveDesc);

					privacySelect.appendChild(option1);
					privacySelect.appendChild(option2);
					privacySelect.appendChild(option3);
					startStreamingBtnCon.appendChild(privacySelect);
				}


				startStreamingBtnCon.appendChild(startStreamingBtn);
				fbStreamingStartSettings.appendChild(startStreamingBtnCon);
				fbStreamingLiveSection.appendChild(facebookLiveEmbed);
				getIframeBtnCon.appendChild(getIframeBtn);
				buttonsCon.appendChild(getIframeBtnCon);
				stopStreamingBtnCon.appendChild(stopStreamingBtn);
				buttonsCon.appendChild(stopStreamingBtnCon);
				fbStreamingLiveSection.appendChild(buttonsCon);

				streamingAndUploading.appendChild(fbStreamingStartSettings);
				streamingAndUploading.appendChild(fbStreamingLiveSection);

				settingsPopup.appendChild(streamingAndUploading);

				tool.settingsPopupEl = settingsPopup;
				tool.cameraBtn.parentNode.appendChild(settingsPopup);

				facebookLiveItem.addEventListener('click', function () {
					if(fbStreamingStartSettings.classList.contains('shown')) {
						fbStreamingStartSettings.classList.remove('shown');
					} else {
						fbStreamingStartSettings.classList.add('shown');
						facebookLiveTtleInput.focus();
					}
				})
				startStreamingBtn.addEventListener('click', function () {
					if(!fbStreamingStartSettings.classList.contains('Q_working')) fbStreamingStartSettings.classList.add('Q_working');

					var data = {};
					data.title = facebookLiveTtleInput.value;
					data.description = facebookLiveDescInput.value;
					data.privacy = privacySelect.value;
					tool.fbLiveInterface.startFacebookLive(data, function (liveInfo) {
						facebookLiveUrl.value = 'https://www.facebook.com' + liveInfo.permalink_url;

						fbStreamingStartSettings.style.display = 'none';
						fbStreamingLiveSection.style.display = 'block';
						if(fbStreamingStartSettings.classList.contains('Q_working')) fbStreamingStartSettings.classList.remove('Q_working');
						fbLivetextLabel.innerHTML = Q.getObject("webrtc.settingsPopup.stopFBLive", tool.textes);

					});
				})
				stopStreamingBtn.addEventListener('click', function () {
					if(!fbStreamingLiveSection.classList.contains('Q_working')) fbStreamingLiveSection.classList.add('Q_working');

					var data = {};
					data.title = facebookLiveTtleInput.value;
					data.description = facebookLiveDescInput.value;
					data.privacy = privacySelect.value;
					tool.fbLiveInterface.endLive(function () {
						facebookLiveUrl.value = '';

						fbStreamingStartSettings.style.display = 'block';
						fbStreamingLiveSection.style.display = 'none';
						if(fbStreamingLiveSection.classList.contains('Q_working')) fbStreamingLiveSection.classList.remove('Q_working');
						fbLivetextLabel.innerHTML = 'Start Facebook Livestream';

					});
				})
				getIframeBtn.addEventListener('click', function () {
					tool.fbLiveInterface.getIframe();
				})

				facebookLiveCopy.addEventListener('click', function () {
					var link = facebookLiveUrl.value;
					if(link.trim() != '') {
						copyToClipboard(facebookLiveUrl);
						tool.WebRTCClass.notice.show(Q.getObject("webrtc.notices.linkCopiedToCb", tool.textes));
					}
				})

				tool.hoverTimeout = {setttingsPopup: null, participantsPopup: null};
				if(!Q.info.isMobile && !Q.info.isTablet) {
					tool.cameraBtn.addEventListener('mouseenter', function (e) {
						if (tool.hoverTimeout.setttingsPopup != null) {
							clearTimeout(tool.hoverTimeout.setttingsPopup);
							tool.hoverTimeout.setttingsPopup = null;
						}
						tool.cameraBtn.parentNode.classList.add('Streams_webrtc_hover');
					});

					tool.cameraBtn.addEventListener('mouseleave', function (e) {
						if (e.target == e.currentTarget || e.currentTarget.contains(e.eventTarget)) {
							e.stopPropagation();
							e.preventDefault();
						}
						tool.hoverTimeout.setttingsPopup = setTimeout(function () {
							tool.cameraBtn.parentNode.classList.remove('Streams_webrtc_hover');
						}, 400)
					});

					settingsPopup.addEventListener('mouseenter', function (e) {

						if(tool.hoverTimeout.setttingsPopup != null) {
							clearTimeout(tool.hoverTimeout.setttingsPopup);
							tool.hoverTimeout.setttingsPopup = null;
						}
					})
					settingsPopup.addEventListener('mouseleave', function (e) {
						setTimeout(function () {
							tool.cameraBtn.parentNode.classList.remove('Streams_webrtc_hover');
						}, 400)

					});
				}

			},

			/**
			 * Create participants popup that appears while pointer hovers users button on desktop/in modal box on mobile
			 * @method participantsPopup
			 */
			participantsPopup:function() {
				var tool = this;

				var localParticipant = tool.WebRTCLib.localParticipant();
				var roomParticipants = tool.WebRTCLib.roomParticipants();
				var participantListEl;
				var ListItem = function () {
					this.listElement = null;
					this.audioBtnEl = null;
					this.videoBtnEl = null;
					this.liveStatusEl = null;
					this.participant = null;
					this.isAudioMuted = null;
					this.isVideoMuted = null;
					this.manuallyToggled = false;
					this.audioToggledManually = false;
					this.isActive = false;
					this.toggleAudio = function (manually) {
						var participant = this.participant;
						var enabledAudioTracks = participant.tracks.filter(function (t) {
							return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled && !t.mediaStreamTrack.muted;
						}).length;
						//if(enabledAudioTracks == 0) return;
						if(this.participant == localParticipant) {
							this.toggleLocalAudio();
							return;
						}
						if(this.isAudioMuted == false || this.isAudioMuted == null) {
							this.muteAudio();
							this.audioToggledManually = manually;
						} else {
							this.unmuteAudio();
							this.audioToggledManually = false;
						}
					};
					this.toggleVideo = function () {
						if(this.participant == localParticipant) {
							this.toggleLocalVideo();
							return;
						}
						if(this.isVideoMuted == false || this.isVideoMuted == null)
							this.muteVideo();
						else this.unmuteVideo();
					};
					this.toggleLocalVideo = function() {
						var i, listItem;
						for (i = 0; listItem = tool.participantsList[i]; i++){
							if(listItem.participant == localParticipant) {
								if(tool.WebRTCLib.conferenceControl.cameraIsEnabled()){
									listItem.videoBtnEl.innerHTML = listIcons.disabledScreen;
									tool.WebRTCLib.conferenceControl.disableVideo();
								} else {
									listItem.videoBtnEl.innerHTML = listIcons.screen;
									tool.WebRTCLib.conferenceControl.enableVideo();
								}
								tool.updateControlBar();
								break;
							}
						}
					};
					this.toggleLocalAudio = function() {
						var i, listItem;
						for (i = 0; listItem = tool.participantsList[i]; i++){
							if(listItem.participant == localParticipant) {
								var enabledAudioTracks = localParticipant.tracks.filter(function (t) {
									return t.kind == 'audio' && t.mediaStreamTrack != null && t.mediaStreamTrack.enabled;
								}).length;

								if(tool.WebRTCLib.conferenceControl.micIsEnabled() && (enabledAudioTracks != 0 || localParticipant.audioStream != null)){
									listItem.audioBtnEl.innerHTML = listIcons.locDisabledMic;
									tool.WebRTCLib.conferenceControl.disableAudio();
								} else {
									listItem.audioBtnEl.innerHTML = icons.microphone;
									tool.WebRTCLib.conferenceControl.enableAudio();
								}
								tool.updateControlBar();

								break;
							}
						}
					};
					this.muteVideo = function () {
						this.videoBtnEl.innerHTML = listIcons.disabledScreen;
						this.isVideoMuted = true;
						this.isActive = false;
					};
					this.unmuteVideo = function () {
						this.videoBtnEl.innerHTML = listIcons.screen;
						this.isVideoMuted = false;
						this.isActive = true;
					};
					this.muteAudio = function () {
						if(this.isAudioMuted == true) return;
						var participant = this.participant;

						for(var i in participant.tracks) {
							var track = participant.tracks[i];
							if(track.kind == 'audio') track.trackEl.muted = true;
						}
						this.audioBtnEl.innerHTML = listIcons.disabledSpeaker;
						this.isAudioMuted = true;
						this.participant.audioIsMuted = this.isAudioMuted;
					};
					this.unmuteAudio = function () {
						if(this.isAudioMuted == false) return;
						var participant = this.participant;
						for(var i in participant.tracks) {
							var track = participant.tracks[i];
							if(track.kind == 'audio') track.trackEl.muted = false;
						}
						this.audioBtnEl.innerHTML = listIcons.loudSpeaker;
						this.isAudioMuted = false;
						this.participant.audioIsMuted = this.isAudioMuted;
					};
					this.remove = function () {
						if(this.listElement.parentNode != null) this.listElement.parentNode.removeChild(this.listElement);
						for(var i in tool.participantsList) {
							if(tool.participantsList[i].participant.sid == this.participant.sid) {
								tool.participantsList[i] = null;
								break;
							}
						}

						tool.participantsList = tool.participantsList.filter(function (listItem) {
							return listItem != null;
						})

					};
					this.toggleScreen = function (manually) {
						var participant = this.participant;
						var screens = participant.screens;
						var enabledVideoTracks = participant.tracks.filter(function (t) {
							return t.kind == 'video' && t.mediaStreamTrack != null;
						}).length;


						this.manuallyToggled = manually;
						if(this.isActive == false) {
							this.showPartcicipantScreens(manually);
						} else {
							this.removePartcicipantScreens();
						}

					};
					this.removePartcicipantScreens = function () {
						var screens = this.participant.screens;
						for(var s in screens) {
							let screen = screens[s];
							screen.hide();
						}
						tool.WebRTCClass.screenRendering.updateLayout();
						this.muteVideo();
					};
					this.showPartcicipantScreens = function (manually) {

						var screens = this.participant.screens;
						for(var s in screens) {
							let screen = screens[s];

							var hasNoVideo = screen.videoTrack == null || (screen.videoTrack != null && screen.videoTrack.videoWidth == 0 && screen.videoTrack.videoHeight == 0);
							if(hasNoVideo && manually) {
								tool.WebRTCClass.notice.show(Q.getObject("webrtc.notices.userHasNoVideo", tool.textes));
								return;
							} else if(hasNoVideo && !screen.videoIsChanging) {
								return;
							}
							screen.show();

						}
						tool.WebRTCClass.screenRendering.updateLayout();
						this.unmuteVideo();
					};
					this.showFacebookLiveIcon = function() {
						this.liveStatusEl.innerHTML = icons.facebookLive;
						if(!this.liveStatusEl.classList.contains('isRecording')) this.liveStatusEl.classList.add('isRecording');
					};
					this.hideFacebookLiveIcon = function() {
						this.liveStatusEl.innerHTML = '';
						if(this.liveStatusEl.classList.contains('isRecording')) this.liveStatusEl.classList.remove('isRecording');
					};
				}

				function showScreen(screen, manually) {
					var i, listItem;
					for (i = 0; listItem = tool.participantsList[i]; i++){
						if(listItem.participant != screen.participant) continue;

						screen.isActive = true;
						listItem.showPartcicipantScreens(manually);
					}
				}

				function update(participant) {
					for(let i in tool.participantsList) {
						let item = tool.participantsList[i];
						if(participant != item.participant) continue;

						let activeScreens = 0;
						for(let s in participant.screens) {
							if(participant.screens[s].isActive) {
								activeScreens++;
							}
						}
						if(activeScreens == 0) {
							item.muteVideo();
						} else {
							item.unmuteVideo();
						}
						break;
					}

				}

				function showFbLiveIndicator(participant) {
					for(let i in tool.participantsList) {
						let item = tool.participantsList[i];
						if(participant != item.participant) continue;

						item.showFacebookLiveIcon();

						break;
					}
				}

				function hideFbLiveIndicator(participant) {
					for(let i in tool.participantsList) {
						let item = tool.participantsList[i];
						if(participant != item.participant) continue;

						item.hideFacebookLiveIcon();

						break;
					}
				}

				var listIcons = {
					loudSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="0 0 99.5 99.5" enable-background="new 0 0 99.5 99.5" xml:space="preserve">  <path fill="#4AAA4E" d="M49.749,99.5C22.317,99.5,0,77.18,0,49.749C0,22.317,22.317,0,49.749,0S99.5,22.317,99.5,49.749   C99.5,77.18,77.182,99.5,49.749,99.5z"/>  <g>   <g id="Layer_2">    <path fill="#FFFFFF" d="M36.463,39.359l10.089-7.573c0.049-0.028,0.095-0.062,0.146-0.084c0.141-0.059,0.184-0.047,0.333-0.051     c0.055,0.012,0.11,0.024,0.165,0.037c0.05,0.025,0.104,0.044,0.151,0.075c0.046,0.031,0.09,0.068,0.127,0.11     c0.077,0.084,0.131,0.186,0.159,0.295c0.013,0.055,0.013,0.112,0.021,0.168v35.382c-0.019,0.148-0.01,0.191-0.082,0.326     c-0.026,0.049-0.06,0.097-0.098,0.14c-0.076,0.084-0.172,0.146-0.279,0.187c-0.053,0.018-0.109,0.029-0.165,0.034     c-0.056,0.007-0.114,0.005-0.169-0.004c-0.15-0.021-0.18-0.058-0.31-0.131l-10.089-7.571h-8.544     c-0.06-0.009-0.121-0.009-0.179-0.023c-0.058-0.016-0.114-0.039-0.166-0.067c-0.105-0.06-0.192-0.147-0.252-0.251     c-0.03-0.053-0.053-0.109-0.069-0.167c-0.015-0.058-0.016-0.118-0.023-0.179V40.047c0.007-0.06,0.008-0.121,0.023-0.178     c0.016-0.058,0.039-0.114,0.069-0.166c0.03-0.052,0.067-0.1,0.109-0.143c0.086-0.086,0.192-0.147,0.309-0.179     c0.058-0.016,0.119-0.016,0.179-0.023L36.463,39.359L36.463,39.359z"/>   </g>   <g>    <path fill="#FFFFFF" d="M56.589,61.012c-0.25,0-0.502-0.095-0.695-0.283c-0.396-0.386-0.406-1.019-0.021-1.413     c9.074-9.354,0.39-18.188,0.017-18.559c-0.396-0.389-0.396-1.022-0.009-1.415c0.392-0.392,1.024-0.393,1.414-0.005     c0.106,0.105,10.449,10.615,0.016,21.372C57.111,60.91,56.851,61.012,56.589,61.012z"/>   </g>   <g>    <path fill="#FFFFFF" d="M62.776,66.321c-0.251,0-0.502-0.094-0.694-0.282c-0.396-0.385-0.406-1.019-0.021-1.414     c14.264-14.703,0.602-28.596,0.014-29.181c-0.393-0.389-0.395-1.022-0.006-1.414c0.391-0.392,1.023-0.393,1.414-0.005     c0.158,0.157,15.637,15.888,0.014,31.991C63.298,66.218,63.039,66.321,62.776,66.321z"/>   </g>   <g>    <path fill="#FFFFFF" d="M68.638,70.759c-0.251,0-0.502-0.094-0.696-0.28c-0.396-0.386-0.405-1.019-0.021-1.414     c18.602-19.175,0.781-37.297,0.014-38.06c-0.393-0.389-0.395-1.022-0.006-1.414c0.39-0.392,1.023-0.394,1.414-0.005     c0.201,0.2,19.975,20.294,0.014,40.871C69.16,70.66,68.898,70.759,68.638,70.759z"/>   </g>  </g>  </svg>',
					disabledSpeaker: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 99.5 99.5" enable-background="new 0 0 99.5 99.5" xml:space="preserve">  <path fill="#8C8C8C" d="M49.749,99.5C22.317,99.5,0,77.18,0,49.749C0,22.317,22.317,0,49.749,0S99.5,22.317,99.5,49.749   C99.5,77.18,77.182,99.5,49.749,99.5z"/>  <g>   <path fill="#FFFFFF" d="M47.654,32.336c-0.008-0.056-0.008-0.113-0.021-0.168c-0.028-0.109-0.082-0.211-0.159-0.295    c-0.037-0.042-0.081-0.079-0.127-0.11c-0.047-0.031-0.101-0.05-0.151-0.075c-0.055-0.013-0.11-0.025-0.165-0.037    c-0.149,0.004-0.192-0.008-0.333,0.051c-0.051,0.022-0.097,0.056-0.146,0.084l-10.089,7.573l-8.545-0.001    c-0.06,0.007-0.121,0.007-0.179,0.023c-0.117,0.032-0.223,0.093-0.309,0.179c-0.042,0.043-0.079,0.091-0.109,0.143    c-0.03,0.052-0.053,0.108-0.069,0.166c-0.015,0.057-0.016,0.118-0.023,0.178v19.964c0.007,0.061,0.008,0.121,0.023,0.179    c0.016,0.058,0.039,0.114,0.069,0.167c0.06,0.104,0.147,0.191,0.252,0.251c0.052,0.028,0.108,0.052,0.166,0.067    c0.058,0.015,0.119,0.015,0.179,0.023h7.885l11.851-11.852V32.336z"/>   <path fill="#FFFFFF" d="M46.551,68.27c0.13,0.073,0.16,0.11,0.31,0.131c0.055,0.009,0.113,0.011,0.169,0.004    c0.056-0.005,0.112-0.017,0.165-0.034c0.107-0.041,0.203-0.103,0.279-0.187c0.038-0.043,0.072-0.091,0.098-0.14    c0.072-0.135,0.063-0.178,0.082-0.326V57.356l-6.708,6.708L46.551,68.27z"/>   <path fill="#FFFFFF" d="M55.873,59.316c-0.385,0.395-0.375,1.027,0.021,1.413c0.193,0.188,0.445,0.283,0.695,0.283    c0.262,0,0.521-0.103,0.721-0.304c5.972-6.156,5.136-12.229,3.31-16.319l-1.479,1.48C60.492,49.367,60.773,54.264,55.873,59.316z"    />   <path fill="#FFFFFF" d="M55.88,39.342c-0.361,0.367-0.371,0.937-0.05,1.329l1.386-1.385C56.824,38.964,56.249,38.974,55.88,39.342z    "/>   <path fill="#FFFFFF" d="M62.068,34.03c-0.189,0.191-0.283,0.44-0.286,0.689l0.981-0.982C62.511,33.741,62.26,33.837,62.068,34.03z"    />   <path fill="#FFFFFF" d="M62.06,64.625c-0.385,0.396-0.375,1.029,0.021,1.414c0.192,0.188,0.443,0.282,0.694,0.282    c0.263,0,0.522-0.103,0.72-0.305c10.728-11.057,6.791-21.938,3.22-27.723l-1.401,1.401C68.548,45.015,71.756,54.63,62.06,64.625z"    />   <path fill="#FFFFFF" d="M67.921,69.065c-0.385,0.396-0.375,1.028,0.021,1.414c0.194,0.187,0.445,0.28,0.696,0.28    c0.26,0,0.521-0.1,0.719-0.303c15.146-15.612,7.416-30.945,2.718-37.522l-1.388,1.388C75.15,40.513,82.071,54.48,67.921,69.065z"/>   <path fill="#FFFFFF" d="M80.402,18.845c-0.385,0-0.771,0.147-1.066,0.441L18.422,80.201c-0.589,0.59-0.589,1.543,0,2.133    c0.294,0.293,0.68,0.441,1.066,0.441c0.386,0,0.772-0.148,1.066-0.441l60.913-60.915c0.59-0.588,0.59-1.544,0-2.132    C81.175,18.992,80.789,18.845,80.402,18.845z"/>  </g>  </svg>',
					screen: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 99.5 99.498" enable-background="new 0 0 99.5 99.498" xml:space="preserve">  <path fill="#4AAA4E" d="M49.749,99.498C22.317,99.498,0,77.181,0,49.749C0,22.318,22.317,0,49.749,0S99.5,22.317,99.5,49.749   C99.5,77.181,77.182,99.498,49.749,99.498z"/>  <g>   <path fill="#FFFFFF" d="M22.158,28.781c-1.204,0-2.172,0.969-2.172,2.173v35.339c0,1.204,0.969,2.173,2.172,2.173h20.857v6.674    h-2.366c-0.438,0-0.79,0.353-0.79,0.789c0,0.438,0.353,0.79,0.79,0.79h18.203c0.438,0,0.789-0.352,0.789-0.79    c0-0.438-0.353-0.789-0.789-0.789h-2.366v-6.674h20.855c1.203,0,2.173-0.969,2.173-2.173V30.954c0-1.204-0.97-2.173-2.173-2.173    H22.158z M22.751,31.47h53.997v34.081H22.751V31.47z"/>   <polygon fill="#F6F4EC" points="42.159,38.611 42.159,59.573 59.137,49.771  "/>  </g>  </svg>',
					disabledScreen: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"   viewBox="0 0 99.499 99.498" enable-background="new 0 0 99.499 99.498" xml:space="preserve">  <path fill="#8C8C8C" d="M49.749,99.498C22.317,99.498,0,77.18,0,49.749S22.317,0,49.749,0s49.75,22.317,49.75,49.749   S77.182,99.498,49.749,99.498z"/>  <g>   <path fill="#FFFFFF" d="M77,31v35H38.234l-1.984,2H43v7h-2.352c-0.438,0-0.79,0.563-0.79,1s0.353,1,0.79,1h18.203    c0.438,0,0.789-0.563,0.789-1s-0.352-1-0.789-1H56v-7h21.341C78.545,68,80,67.497,80,66.293V30.954C80,29.75,78.545,29,77.341,29    h-2.337l-2.02,2H77z"/>   <path fill="#FFFFFF" d="M23,66V31h42.244l2.146-2H22.158C20.954,29,20,29.75,20,30.954v35.339C20,67.497,20.954,68,22.158,68h6.091    l2.11-2H23z"/>   <polygon fill="#FFFFFF" points="42,54.557 51.621,44.936 42,38.611  "/>   <polygon fill="#FFFFFF" points="56.046,47.74 47.016,56.769 59.137,49.771  "/>   <path fill="#FFFFFF" d="M81.061,21.311c0.586-0.585,0.586-1.536,0-2.121C80.768,18.896,80.384,18.75,80,18.75    s-0.768,0.146-1.061,0.439L18.33,79.799c-0.586,0.586-0.586,1.535,0,2.121c0.293,0.293,0.677,0.439,1.061,0.439    s0.768-0.146,1.061-0.439L81.061,21.311z"/>  </g>  </svg>',
					locDisabledCamera: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-0.165 -0.245 100 99.999" enable-background="new -0.165 -0.245 100 99.999"    xml:space="preserve">  <path fill="#8C8C8C" d="M49.834-0.245c-27.569,0-50,22.43-50,50c0,27.57,22.429,49.999,50,49.999c27.57,0,50-22.429,50-49.999   C99.835,22.186,77.404-0.245,49.834-0.245z M25.516,37.254h29.489L34.73,60.791h-9.214V37.254z M24.492,75.004l47.98-55.722   l3.046,2.623L27.538,77.627L24.492,75.004z M77.71,61.244l-15.599-9.006v8.553H44.016l18.096-21.006v6.309l15.599-9.006V61.244z"/>  </svg>',
					locDisabledMic: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"    viewBox="-0.165 -0.245 100 99.999" enable-background="new -0.165 -0.245 100 99.999"    xml:space="preserve">  <path fill="#8C8C8C" d="M49.834-0.245c-27.569,0-50,22.43-50,50c0,27.57,22.429,49.999,50,49.999c27.57,0,50-22.429,50-49.999   C99.835,22.186,77.404-0.245,49.834-0.245z M41.411,32.236c0.001-4.678,3.794-8.473,8.473-8.473c4.681,0,8.472,3.793,8.472,8.473   v0.502L41.421,52.4c-0.001-0.068-0.01-0.135-0.01-0.203V32.236z M35.376,42.216h3.379v10.177c0,0.934,0.127,1.836,0.345,2.703   l-2.616,3.037c-0.708-1.713-1.107-3.58-1.107-5.535V42.216z M64.392,52.598c0,7.357-5.51,13.551-12.818,14.408v5.436h6.783v3.381   H41.411v-3.381h6.783v-5.436c-2.8-0.328-5.331-1.443-7.394-3.105l2.317-2.688c1.875,1.441,4.217,2.309,6.767,2.309   c6.146,0,11.127-4.984,11.127-11.129V42.216h3.381V52.598z M44.954,59.078l13.403-15.56v8.677c0,4.68-3.793,8.475-8.473,8.475   C48.042,60.67,46.344,60.076,44.954,59.078z M27.421,77.139l-3.046-2.623l47.979-55.723l3.046,2.623L27.421,77.139z"/>  </svg>'
				}

				/**
				 * Add item to participants list and bind events that are happened on buttons click/tap
				 * @method addItem
				 */
				function addItem(roomParticipant) {
					var isLocal = roomParticipant == localParticipant;
					var participantItem = document.createElement('LI');
					var tracksControlBtns = document.createElement('DIV');
					tracksControlBtns.className = 'Streams_webrtc_tracks-control';
					var muteVideoBtn = document.createElement('DIV');
					muteVideoBtn.className = 'Streams_webrtc_mute-video-btn' + (isLocal ? ' Streams_webrtc_isLocal' : '');
					muteVideoBtn.innerHTML = (tool.WebRTCLib.conferenceControl.cameraIsEnabled() ? listIcons.screen : listIcons.disabledScreen);

					var muteAudioBtn = document.createElement('DIV');
					muteAudioBtn.className = 'Streams_webrtc_mute-audio-btn' + (isLocal ? ' Streams_webrtc_isLocal' : '');
					muteAudioBtn.innerHTML = isLocal ? (tool.WebRTCLib.conferenceControl.micIsEnabled() ? icons.microphone : listIcons.locDisabledMic) : listIcons.loudSpeaker;
					var participantIdentity = document.createElement('DIV');
					participantIdentity.className = 'Streams_webrtc_participants-identity';
					var participantIdentityIcon = document.createElement('DIV');
					var userId = roomParticipant.identity != null ? roomParticipant.identity.split('\t')[0] : Q.Users.loggedInUser.id;
					Q.activate(
						Q.Tool.setUpElement(
							participantIdentityIcon, // or pass an existing element
							"Users/avatar",
							{
								userId: userId,
								contents: false
							}
						)
					);
					//$(participantIdentityText).tool('Users/avatar', { userId: userId }).activate();
					//participantIdentityText.innerHTML = isLocal ? roomParticipant.identity + ' <span style="font-weight: normal;font-style: italic;">(me)</span>' : roomParticipant.identity;
					var liveStatus = document.createElement('DIV');
					liveStatus.className = 'Streams_webrtc_participants-live-status';
					if(roomParticipant.fbLiveStreamingActive) liveStatus.classList.add('isRecording');
					liveStatus.innerHTML = icons.facebookLive;

					var participantIdentityText = document.createElement('DIV');
					//fullName.innerHTML = roomParticipant.userName;
					Q.activate(
						Q.Tool.setUpElement(
							participantIdentityText, // or pass an existing element
							"Users/avatar",
							{
								userId: userId,
								icon: false
							}
						)
					);

					var audioVisualization = document.createElement('DIV')
					audioVisualization.className = 'Streams_webrtc_popup-visualization';

					tool.WebRTCLib.screensInterface.audioVisualization().build({
						name:'participantsPopup',
						participant: roomParticipant,
						element:audioVisualization,
						updateSizeOnlyOnce:true
					});

					participantItem.appendChild(tracksControlBtns);
					tracksControlBtns.appendChild(muteVideoBtn);
					tracksControlBtns.appendChild(muteAudioBtn);
					participantItem.appendChild(tracksControlBtns);
					participantIdentity.appendChild(audioVisualization);
					participantIdentity.appendChild(participantIdentityIcon);
					participantIdentity.appendChild(liveStatus);
					participantIdentity.appendChild(participantIdentityText);
					participantItem.appendChild(participantIdentity);

					tool.participantListEl.appendChild(participantItem);

					var listItem = new ListItem();
					listItem.participant = roomParticipant;
					listItem.listElement = participantItem;
					listItem.videoBtnEl = muteVideoBtn;
					listItem.audioBtnEl = muteAudioBtn;
					listItem.liveStatusEl = liveStatus;
					tool.participantsList.push(listItem);

					muteAudioBtn.addEventListener('click', function (e) {
						listItem.toggleAudio(true);
					});
					muteVideoBtn.addEventListener('click', function (e) {
						listItem.toggleScreen(true);
					});

				}

				/**
				 * Toggles video button (active/inactive) of local participant on participants list
				 * @method toggleLocalVideo
				 */
				function toggleLocalVideo() {
					if(tool.participantsList == null) return;

					var i, listItem;
					for (i = 0; listItem = tool.participantsList[i]; i++){
						if(listItem.participant == localParticipant) {
							if(tool.WebRTCLib.conferenceControl.cameraIsEnabled()){
								listItem.videoBtnEl.innerHTML = listIcons.screen;
								listItem.isVideoMuted = false;
							} else {
								listItem.videoBtnEl.innerHTML = listIcons.disabledScreen;
								listItem.isVideoMuted = true;
							}
							break;
						}
					}
				}

				/**
				 * Toggles audio icon (active/inactive) of local participant on participants list
				 * @method toggleLocalAudio
				 */
				function toggleLocalAudio() {
					if(tool.participantsList == null) return;

					var i, listItem;
					for (i = 0; listItem = tool.participantsList[i]; i++){
						if(listItem.participant == localParticipant) {
							if(tool.WebRTCLib.conferenceControl.micIsEnabled()){
								listItem.audioBtnEl.innerHTML = icons.microphone;
								listItem.isAudioMuted = false;
							} else {
								listItem.audioBtnEl.innerHTML = listIcons.locDisabledMic;
								listItem.isAudioMuted = true;
							}
							break;
						}
					}
				}

				/**
				 * Remove item from participants list participants list
				 * @method removeItem
				 */
				function removeItem(participant) {
					var item = tool.participantsList.filter(function (listItem) {
						return listItem.participant.sid == participant.sid;
					})[0];
					if(item != null) item.remove();
				}

				/**
				 * Toggles screens view mode depending on selected option
				 * @method toggleViewMode
				 * @param {Object} e
				 */
				function toggleViewMode(e, buttonsArr) {
					var btn = e.currentTarget;
					var viewModeToApply = btn.dataset.viewMode;
					for(var b in buttonsArr) {
						if(buttonsArr[b].viewMode == viewModeToApply) {
							buttonsArr[b].icon.innerHTML = buttonsArr[b].onIcon;
							if(buttonsArr[b].handler != null) buttonsArr[b].handler();
						} else buttonsArr[b].icon.innerHTML = buttonsArr[b].offIcon;
					}
				}

				/**
				 * Create participants list that is used in popup (on desktop) or modal box (on mobile)
				 * @method createList
				 */
				function createList() {
					if(tool.participantsList == null) tool.participantsList = [];
					var participantsListCon = document.createElement('DIV');
					participantsListCon.className = 'Streams_webrtc_popup-participants-list Streams_webrtc_popup-box';

					var topBtns = document.createElement('DIV');
					topBtns.className = 'participants-list-btns';
					var disconnectBtn = document.createElement('DIV');
					disconnectBtn.className = 'Streams_webrtc_disconnect-btn';
					disconnectBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.disconnect", tool.textes);
					disconnectBtn.innerHTML = icons.disconnectIcon;

					var floatingViewModeBtn = document.createElement('DIV');
					floatingViewModeBtn.className = 'Streams_webrtc_floating-mode-btn';
					floatingViewModeBtn.dataset.viewMode = 'floatingView';
					floatingViewModeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.floatingScreens", tool.textes);
					var floatingViewModeBtnIcon = document.createElement('SPAN');
					floatingViewModeBtnIcon.innerHTML = icons.freeViewModeOff;

					var tiledViewModeBtn = document.createElement('DIV');
					tiledViewModeBtn.className = 'Streams_webrtc_tiled-mode-btn';
					tiledViewModeBtn.dataset.viewMode = 'tiledView';
					tiledViewModeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.tiledScreens", tool.textes);
					var tiledViewModeBtnIcon = document.createElement('SPAN');
					tiledViewModeBtnIcon.innerHTML = icons.tiledViewModeOff;

					var loudestExceptMeBtn = document.createElement('DIV');
					loudestExceptMeBtn.className = 'Streams_webrtc_lem-mode-btn';
					loudestExceptMeBtn.dataset.viewMode = 'loudestExceptMe';
					loudestExceptMeBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.loudestExceptMe", tool.textes);
					var loudestExceptMeBtnIcon = document.createElement('SPAN');
					loudestExceptMeBtnIcon.innerHTML = icons.loudestExceptMeOff;

					var loudestBtn = document.createElement('DIV');
					loudestBtn.className = 'Streams_webrtc_loudest-mode-btn';
					loudestBtn.dataset.viewMode = 'loudest';
					loudestBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.maximizeLoudest", tool.textes);
					var loudestBtnIcon = document.createElement('SPAN');
					loudestBtnIcon.innerHTML = icons.maximizeLoudestOff;

					var maximizeStaticBtn = document.createElement('DIV');
					maximizeStaticBtn.className = 'Streams_webrtc_loudest-mode-btn';
					maximizeStaticBtn.dataset.viewMode = 'maximizeStatic';
					maximizeStaticBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.staticMaximized", tool.textes);
					var maximizeStaticBtnIcon = document.createElement('SPAN');
					maximizeStaticBtnIcon.innerHTML = icons.staticMaximizeOff;

					var manualLayoutBtn = document.createElement('DIV');
					manualLayoutBtn.className = 'Streams_webrtc_loudest-mode-btn';
					manualLayoutBtn.dataset.viewMode = 'manual';
					manualLayoutBtn.dataset.touchlabel = Q.getObject("webrtc.participantsPopup.manual", tool.textes);
					var manualLayoutBtnIcon = document.createElement('SPAN');
					manualLayoutBtnIcon.innerHTML = icons.dragIconOff;

					var loudestSelectCon = document.createElement('DIV');
					loudestSelectCon.className = 'loudest-options-con'
					var loudestSelect = document.createElement('SELECT');
					loudestSelect.className = 'loudest-options'
					var option1 = document.createElement('OPTION');
					option1.innerHTML = 'Loudest';
					option1.value = 'all';
					var option2 = document.createElement('OPTION');
					option2.innerHTML = 'Loudest Except Me';
					option2.value = 'allButMe';
					option2.selected = true;
					var option3 = document.createElement('OPTION');
					option3.value = 'disabled';
					option3.className = 'loudest-options-disabled';
					option3.innerHTML = 'Static';
					loudestSelect.addEventListener('change', function (e) {
						var value = loudestSelect.options[loudestSelect.selectedIndex].value;
						toggleLoudesScreenMode(value);
					})
					loudestSelect.appendChild(option1);
					loudestSelect.appendChild(option2);
					loudestSelect.appendChild(option3);
					loudestSelectCon.appendChild(loudestSelect);
					tool.loudestSelect = loudestSelect;

					topBtns.appendChild(disconnectBtn);
					floatingViewModeBtn.appendChild(floatingViewModeBtnIcon);
					if(!Q.info.isMobile) topBtns.appendChild(floatingViewModeBtn);
					tiledViewModeBtn.appendChild(tiledViewModeBtnIcon);
					topBtns.appendChild(tiledViewModeBtn);
					loudestExceptMeBtn.appendChild(loudestExceptMeBtnIcon);
					topBtns.appendChild(loudestExceptMeBtn);
					loudestBtn.appendChild(loudestBtnIcon);
					topBtns.appendChild(loudestBtn);
					maximizeStaticBtn.appendChild(maximizeStaticBtnIcon);
					topBtns.appendChild(maximizeStaticBtn);
					manualLayoutBtn.appendChild(manualLayoutBtnIcon);
					if(!Q.info.isMobile) topBtns.appendChild(manualLayoutBtn);
					//topBtns.appendChild(loudestSelectCon);
					participantsListCon.appendChild(topBtns)

					var buttonsArr = [
						{
							viewMode:'floatingView',
							btn: floatingViewModeBtn,
							icon: floatingViewModeBtnIcon,
							onIcon: icons.freeViewModeOn,
							offIcon: icons.freeViewModeOff,
							handler: function () {
								toggleLoudesScreenMode('disabled');
								tool.state.webrtcClass.screenRendering.renderDesktopScreensGrid();
							}
						},
						{
							viewMode:'tiledView',
							btn: tiledViewModeBtn,
							icon: tiledViewModeBtnIcon,
							onIcon: icons.tiledViewModeOn,
							offIcon: icons.tiledViewModeOff,
							handler: function () {
								toggleLoudesScreenMode('disabled');
								if(Q.info.isMobile)
									tool.state.webrtcClass.screenRendering.renderTiledScreensGridMobile();
								else tool.state.webrtcClass.screenRendering.renderTiledScreensGridDesktop();
							}
						},
						{
							viewMode:'loudestExceptMe',
							btn: loudestExceptMeBtn,
							icon: loudestExceptMeBtnIcon,
							onIcon: icons.loudestExceptMeOn,
							offIcon: icons.loudestExceptMeOff,
							handler: function () {
								toggleLoudesScreenMode('allButMe');
							}
						},
						{
							viewMode:'loudest',
							btn: loudestBtn,
							icon: loudestBtnIcon,
							onIcon: icons.maximizeLoudestOn,
							offIcon: icons.maximizeLoudestOff,
							handler: function () {
								toggleLoudesScreenMode('all');
							}
						},
						{
							viewMode:'maximizeStatic',
							btn: maximizeStaticBtn,
							icon: maximizeStaticBtnIcon,
							onIcon: icons.staticMaximizeOn,
							offIcon: icons.staticMaximizeOff,
							handler: function(){
								toggleLoudesScreenMode('disabled');
								var maximize = function(screen) {
									if(Q.info.isMobile)
										tool.state.webrtcClass.screenRendering.renderMaximizedScreensGridMobile(screen, 300);
									else tool.state.webrtcClass.screenRendering.renderMaximizedScreensGrid(screen, 300);
								}
								var activeScreen = tool.state.webrtcClass.screenRendering.getActiveSreen();
								if(activeScreen != null) {
									maximize(activeScreen);
								} else {
									var screens = tool.WebRTCLib.screens();
									maximize(screens[0]);
								}
							}
						},
						{
							viewMode:'manual',
							btn: manualLayoutBtn,
							icon: manualLayoutBtnIcon,
							onIcon: icons.dragIconOn,
							offIcon: icons.dragIconOff,
							handler: function(){
								toggleLoudesScreenMode('disabled');
								tool.state.webrtcClass.screenRendering.renderManualScreensGrid();

							}
						}
						];
					for (var b in buttonsArr) {
						buttonsArr[b].btn.addEventListener('mouseup', function (e) {
							toggleViewMode(e, buttonsArr);
						});
					}

					tool.toggleViewBtns = buttonsArr;

					tool.participantListEl = document.createElement('UL');
					tool.participantListEl.className = 'Streams_webrtc_participants-list';
					addItem(localParticipant);
					roomParticipants = tool.WebRTCLib.roomParticipants();
					for(var i in roomParticipants) {
						if(roomParticipants[i] == localParticipant) continue;
						addItem(roomParticipants[i]);
					}
					participantsListCon.appendChild(tool.participantListEl)

					if(!Q.info.isMobile && !Q.info.isTablet) {
						tool.usersBtn.parentNode.appendChild(participantsListCon);
					} else {
						/*var container = tool.usersBtn.parentNode
						container.insertBefore(participantsListCon, tool.usersBtn);*/
					}
					//tool.participantsList = tool.participantsList;


					if(Q.info.isMobile || Q.info.isTablet) {

						tool.usersBtn.addEventListener('touchend', function (e) {
							//tool.usersBtn.parentNode.classList.toggle('Streams_webrtc_hover');
							Q.Dialogs.push({
								title: "Participants",
								className: 'Streams_webrtc_participants-list',
								content: participantsListCon,
								apply: true,
								onActivate: function (dialog) {
									$(disconnectBtn).plugin('Q/clickable', {
										press: {size: 1.2},
										release: {size: 1.2}
									}).on(Q.Pointer.fastclick, function () {
										Q.Dialogs.pop();
										tool.state.webrtcClass.stop();
									});
									setTimeout(function () {
										var participants = tool.WebRTCLib.roomParticipants();
										for (var i in participants) {
											if(participants[i].soundMeter.visualizations.participantsPopup != null) participants[i].soundMeter.visualizations.participantsPopup.reset();
										}
									}, 3000)
								}
							});
						});

					} else {
						tool.usersBtn.addEventListener('mouseenter', function (e) {
							if (tool.hoverTimeout.participantsPopup != null) {
								clearTimeout(tool.hoverTimeout.participantsPopup);
								tool.hoverTimeout.participantsPopup = null;
							}

							var participants = tool.WebRTCLib.roomParticipants();
							for (var i in participants) {
								if(participants[i].soundMeter.visualizations.participantsPopup != null) participants[i].soundMeter.visualizations.participantsPopup.reset();
							}

							tool.usersBtn.parentNode.classList.add('Streams_webrtc_hover');
						});
						tool.usersBtn.parentNode.addEventListener('mouseleave', function (e) {
							tool.hoverTimeout.participantsPopup = setTimeout(function () {
								tool.usersBtn.parentNode.classList.remove('Streams_webrtc_hover');
							}, 400)
						});

						participantsListCon.addEventListener('mouseenter', function (e) {

							if (tool.hoverTimeout.participantsPopup != null) {
								clearTimeout(tool.hoverTimeout.participantsPopup);
								tool.hoverTimeout.participantsPopup = null;
							}
						})
						participantsListCon.addEventListener('mouseleave', function (e) {
							setTimeout(function () {
								tool.usersBtn.parentNode.classList.remove('Streams_webrtc_hover');
							}, 400)

						});

						$(disconnectBtn).plugin('Q/clickable', {
							press: {size: 1.2},
							release: {size: 1.2}
						}).on(Q.Pointer.fastclick, function () {
							tool.state.webrtcClass.stop();
						});
					}
				}

				function maximizeLoudestScreen(mode) {
					tool.WebRTCLib.screensInterface.getLoudestScreen(mode, function (loudestScreen) {
						if(Q.info.isMobile)
							tool.state.webrtcClass.screenRendering.renderMaximizedScreensGridMobile(loudestScreen, 0);
						else tool.state.webrtcClass.screenRendering.renderMaximizedScreensGrid(loudestScreen, 0);

					});
				}

				function toggleLoudesScreenMode(mode) {
					tool.state.loudestMode = mode;
					maximizeLoudestScreen(mode);
					if(tool.loudestModeInterval != null) {
						clearInterval(tool.loudestModeInterval);
						tool.loudestModeInterval = null;
					}

					if(mode == 'disabled'){
						return;
					}

					tool.loudestModeInterval = setInterval(function () {
						maximizeLoudestScreen(mode);
					}, 1000);

				}

				function disableLoudesScreenMode() {
					if(tool.loudestModeInterval != null) {
						clearInterval(tool.loudestModeInterval);
						tool.loudestModeInterval = null;
					}
					var disabledOption = tool.loudestSelect.getElementsByClassName('loudest-options-disabled')[0];
					if(disabledOption != null) {
						disabledOption.selected = 'selected';
						tool.state.loudestMode = 'disabled';
					}
				}

				function checkActiveMediaTracks() {
					/*tool.checkActiveMediaTracksInterval = setInterval(function () {
						var i;
						for (i = 0; i < tool.participantsList.length; i++){
							let listItem = tool.participantsList[i];
							var participant = listItem.participant;
							var screens = participant.screens;
							var enabledVideoTracks = participant.tracks.filter(function (t) {
								if(t.kind == 'video' && t.mediaStreamTrack != null) {
									console.log('checkActiveMediaTracks track', t.mediaStreamTrack.enabled,  t.mediaStreamTrack.readyState)
								}
								return t.kind == 'video' && t.mediaStreamTrack != null && (t.mediaStreamTrack.enabled && t.mediaStreamTrack.readyState != 'ended' && t.mediaStreamTrack.muted != true);
							}).length;

							var hasActiveVideoTrack = false, hasActiveScreen = false, participantScreens = listItem.participant.screens;
							for (let s in participantScreens) {
								let screen = participantScreens[s];
								if(screen.videoTrack != null && screen.videoTrack.videoWidth != 0 && screen.videoTrack.videoHeight != 0) {
									console.log('screen.videoTrack', screen.videoTrack)
									hasActiveVideoTrack = true;
								}
								if(screen.isActive) {
									hasActiveScreen = true;
								}
							}

							console.log('checkActiveMediaTracks enabledVideoTracks', hasActiveScreen, hasActiveVideoTrack, enabledVideoTracks, listItem.participant.screens.length, listItem.participant.isLocal, listItem.isActive, listItem.manuallyToggled )

							if(hasActiveScreen && (participant.remoteCameraIsEnabled == false || ((!hasActiveVideoTrack || enabledVideoTracks == 0) && !listItem.participant.videoIsChanging && listItem.participant.screens.length != 0))) {
								console.log('checkActiveMediaTracks if1')
								listItem.removePartcicipantScreens(true);

							} else if(participant.remoteCameraIsEnabled == true && !hasActiveScreen && hasActiveVideoTrack && enabledVideoTracks != 0 && !listItem.manuallyToggled && !listItem.isActive && listItem.participant.screens.length != 0) {
								console.log('checkActiveMediaTracks if2')
								listItem.showPartcicipantScreens();
							}

							if(!hasActiveScreen && hasActiveVideoTrack && enabledVideoTracks != 0 && !listItem.manuallyToggled ) {

							}

						}
					}, 3000);*/
				}

				function disableCheckActiveMediaTracks() {
					if(tool.checkActiveMediaTracksInterval != null) {
						clearInterval(tool.checkActiveMediaTracksInterval);
						tool.checkActiveMediaTracksInterval = null;
					}
				}



				return {
					createList:createList,
					toggleLocalVideo:toggleLocalVideo,
					toggleLocalAudio:toggleLocalAudio,
					addItem:addItem,
					removeItem:removeItem,
					showScreen:showScreen,
					update:update,
					showFbLiveIndicator:showFbLiveIndicator,
					hideFbLiveIndicator:hideFbLiveIndicator,
					maximizeLoudestScreen:maximizeLoudestScreen,
					toggleLoudesScreenMode:toggleLoudesScreenMode,
					checkActiveMediaTracks:checkActiveMediaTracks,
					disableLoudesScreenMode:disableLoudesScreenMode,
					disableCheckActiveMediaTracks:disableCheckActiveMediaTracks
				}
			},

			initFbLiveInterface: function() {
				var tool = this;
				tool.fbLiveInterface = (function() {
					var _liveId;
					var _liveInfo;
					var _accessToken;

					function goLiveDialog(callback) {
						//return connect('123', captureStreamAndSend);
						var goLive = function() {
							FB.ui({
								display: 'popup',
								method: 'live_broadcast',
								phase: 'create'
							}, (createRes) => {

								FB.ui({
									display: 'popup',
									method: 'live_broadcast',
									phase: 'publish',
									broadcast_data: createRes
								}, (publishRes) => {
									if(publishRes == null || typeof publishRes == 'undefined') {
										tool.WebRTCLib.screensInterface.fbLive.endStreaming();
									}

									_liveId = publishRes.id
									var linkToStream = 'https://www.facebook.com/facebook/videos/' + publishRes.id;
									if(callback != null) callback(linkToStream);
								});

								tool.WebRTCLib.screensInterface.fbLive.startStreaming(createRes.secure_stream_url);
							});
						}

						FB.getLoginStatus(function(response){
							if (response.status === 'connected') {
								goLive();
							} else {
								FB.login(function(response) {
									if (response.authResponse) {
										goLive();
									}
								}, {scope: 'email,public_profile,publish_video'});

							}

						});

					}

					/**
					 * Creates live streaming session via FB SDK for PHP
					 * @method createLive
					 * @param {Object} [data] title, description
					 * @param {Object} [data.title] title when posting Live
					 * @param {Object} [data.description] description when posting live
					 * @param {Function} [callback] callback function that is triggered after live session created
					 * @return {Object} RTMP urls for streaming
					 */
					function createLive(data, callback) {
						Q.req("Streams/fbLive", ["fbLive"], function (err, response) {
							var msg = Q.firstErrorMessage(err, response && response.errors);

							if (msg) {
								return Q.alert(msg);
							}

							_liveId = response.slots.fbLive.id
							if(callback != null) callback(response.slots.fbLive);

						}, {
							method: 'POST',
							fields: {
								'accessToken': tool.fbAccessToken,
								'title': data.title,
								'description': data.description,
								'action': 'start'
							}
						});
					}

					/**
					 * Ends live streaming session via FB SDK for PHP
					 * @method deleteLive
					 * @param {Function} [callback] callback function that is triggered after live session was ended
					 */
					function endLive(callback) {
						Q.req("Streams/fbLive", ["fbLive"], function (err, response) {
							var msg = Q.firstErrorMessage(err, response && response.errors);

							if (msg) {
								return Q.alert(msg);
							}

							tool.WebRTCLib.screensInterface.fbLive.endStreaming();
							if(callback != null) callback(response.slots.fbLive);
						}, {
							method: 'post',
							fields: {
								'accessToken': tool.fbAccessToken,
								'id': _liveId,
								'action': 'end'
							}
						});
					}

					/**
					 * Removes live streaming session via FB SDK for PHP
					 * @method deleteLive
					 * @param {Function} [callback] callback function that is triggered after live session was deleted
					 */
					function deleteLive(callback) {
						Q.req("Streams/webrtc", ["fblive"], function (err, response) {
							var msg = Q.firstErrorMessage(err, response && response.errors);

							if (msg) {
								return Q.alert(msg);
							}

							if(callback != null) callback();
						}, {
							method: 'delete',
							fields: {
								'accessToken': tool.fbAccessToken,
								'action': 'delete'
							}
						});
					}


					/**
					 * 1) Checks FB login status; 2) gets RTMP url for streaming; 3) passes it to websocket streamer function
					 * @method startFacebookLive
					 */
					function startFacebookLive(data, callback) {


						var satrtLive = function () {
							if (tool.WebRTCClass.options().liveStreaming.startFbLiveViaGoLiveDialog) {
								goLiveDialog(callback);
								return
							}
							var loggedInCallback = function () {
								if (tool.WebRTCLib.screensInterface.fbLive.isStreaming()) {
									tool.facebookLiveDialog();
								} else {
									tool.fbLiveInterface.createLive(data, function (response) {

										tool.WebRTCLib.screensInterface.fbLive.startStreaming(response.secure_stream_url);
										_liveInfo = response;
										if (callback != null) callback(response);
									});
								}
							}

							var notLoggedInCallback = function() {
								FB.login(function (response) {
									if (response.authResponse) {
										tool.fbAccessToken = response.authResponse.accessToken;
										loggedInCallback(response.authResponse.accessToken);
									}
								}, {auth_type: 'reauthorize', scope: 'email,public_profile,publish_video'});
							}

							FB.getLoginStatus(function (response) {
								if (response.status === 'connected') {
									FB.api(
										'/me/permissions',
										'GET',
										function(permissionsResponse) {
											var permissions = permissionsResponse.data;
											for (let p in permissions) {
												if(permissions[p].permission == 'publish_video') {
													tool.fbAccessToken = response.authResponse.accessToken;
													loggedInCallback();
													return;
												}
											}

											notLoggedInCallback();
										}
									);

								} else {
									notLoggedInCallback();
								}

							});
						}

						if(tool.WebRTCClass.options().liveStreaming.useRecordRTCLibrary) {
							Q.addScript([
								"{{Streams}}/js/tools/webrtc/RecordRTC.js"
							], function () {
								satrtLive();
							});
						} else {
							satrtLive();
						}

					}

					/**
					 * Show dialog with iframe code
					 * @method startFacebookLive
					 */
					function getIframe() {
						var testFrame = '<iframe src="https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2F100004473155810%2Fvideos%2F1429100060582419%2F&width=0" width="0" height="0" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowTransparency="true" allowFullScreen="true"></iframe>';

						var bg=document.createElement('DIV');
						bg.className = 'dialog-bg';

						var dialogCon = document.createElement('DIV');
						dialogCon.className = 'dialog-con';
						dialogCon.addEventListener('click', function (e){
							e.stopPropagation();
							//if(e.currentTarget == e.target) self.closeAllDialogues();
						});

						var dialogTitle=document.createElement('H3');
						dialogTitle.innerHTML = 'Embed';
						dialogTitle.className = 'dialog-header Q_dialog_title';

						var close=document.createElement('div');
						close.className = 'close-dialog-sign';
						close.style.backgroundImage = 'url("' + Q.url("{{Q}}/img/apply.png") + '")';

						var dialogue=document.createElement('DIV');
						dialogue.className = 'dialog-box Streams_webrtc_live-preview';

						var dialogInner=document.createElement('DIV');
						dialogInner.className = 'dialog-inner';

						var iframeCodeCon = document.createElement('DIV');
						iframeCodeCon.className = 'Streams_webrtc_live_embed_code';
						var iframeCodeTitle = document.createElement('DIV');
						iframeCodeTitle.className = 'Streams_webrtc_live_embed_title';
						iframeCodeTitle.innerHTML = 'Embed Video';
						var iframeCode = document.createElement('TEXTAREA');
						iframeCode.innerText = _liveInfo ? _liveInfo['embed_html'] : testFrame;

						var copyBtn = document.createElement('BUTTON');
						copyBtn.type = 'button';
						copyBtn.className = 'Q_button';
						copyBtn.innerHTML = Q.getObject("webrtc.settingsPopup.copy", tool.textes);

						var preview = document.createElement('DIV');
						preview.className = 'Streams_webrtc-dialog-preview';
						preview.innerHTML = _liveInfo ? _liveInfo['embed_html'] : testFrame;

						dialogInner.appendChild(dialogTitle);
						iframeCodeCon.appendChild(iframeCodeTitle);
						iframeCodeCon.appendChild(iframeCode);
						iframeCodeCon.appendChild(copyBtn);
						preview.appendChild(iframeCodeCon);
						dialogInner.appendChild(preview);

						dialogue.appendChild(close);
						dialogue.appendChild(dialogInner);
						dialogCon.appendChild(dialogue)
						document.body.appendChild(dialogCon);
						document.body.appendChild(bg);

						/*var contentWidth = tool.settingsPopupEl.firstChild.scrollWidth;

						dialogue.style.minWidth = tool.settingsPopupEl.firstChild.scrollWidth + 'px';*/
						tool.state.dialogIsOpened = true;


						iframeCode.addEventListener('click', function () {
							this.setSelectionRange(0, this.value.length);
						})

						copyBtn.addEventListener('click', function () {
							copyToClipboard(preview);
							tool.WebRTCClass.notice.show(Q.getObject("webrtc.notices.codeCopiedToCb", tool.textes));
						});

						close.addEventListener('click', function () {
							if(bg.parentNode != null) bg.parentNode.removeChild(bg);
							if(dialogCon.parentNode != null) dialogCon.parentNode.removeChild(dialogCon);
							tool.state.dialogIsOpened = false;
						});
					}


					return {
						createLive: createLive,
						deleteLive: deleteLive,
						endLive: endLive,
						startFacebookLive: startFacebookLive,
						getIframe: getIframe
					}
				}());
			},
			facebookLiveDialog: function () {
				var tool = this;
				var fbLiveDialog = document.createElement('DIV');
				fbLiveDialog.className = 'Streams_webrtc_fblive_dialog_inner';
				var endStreamingBtn = document.createElement('BUTTON');
				endStreamingBtn.type = 'button';
				endStreamingBtn.className = 'Q_button';
				endStreamingBtn.innerHTML = "Stop streaming";
				endStreamingBtn.addEventListener('click', function () {
					tool.WebRTCLib.screensInterface.fbLive.endStreaming();
				})
				fbLiveDialog.appendChild(endStreamingBtn);
				Q.Dialogs.push({
					title: 'Faceook live streaming started',
					className: 'Streams_webrtc_fblive_dialog',
					content: fbLiveDialog,
					apply: true
				});
			},
			closeAllDialogues: function () {
				var tool = this;
				var elems=[].slice.call(document.getElementsByClassName('dialog-con')).concat([].slice.call(document.getElementsByClassName('dialog-bg')));
				for(var i=0;i<elems.length;i++) {
					elems[i].parentNode.removeChild(elems[i]);
				}
				tool.state.dialogIsOpened = false;
			}
		}

	);

})(window.jQuery, window);