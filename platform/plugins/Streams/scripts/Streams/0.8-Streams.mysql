# Dump of table {$prefix}access
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}access`;

CREATE TABLE `{$prefix}access` (
  `publisherId` varbinary(31) NOT NULL COMMENT 'id of user who publishes the stream',
  `streamName` varbinary(255) NOT NULL COMMENT 'the name of the stream whose access is specified',
  `ofUserId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of user whose subscription access being recorded',
  `ofContactLabel` varbinary(255) NOT NULL DEFAULT '' COMMENT 'to grant access to all contacts under a certain label, set byUserId = 0',
  `grantedByUserId` varbinary(31) DEFAULT NULL COMMENT 'id of the user who granted the access. This is publisherId unless user has adminLevel >= invite',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'saved on shard of publisherId',
  `updatedTime` timestamp NULL DEFAULT NULL COMMENT 'saved on shard of publisherId',
  `readLevel` int(11) NOT NULL DEFAULT '0' COMMENT '<0=ignored, 0=''none'', 10=''see'', 20=''content'', 30=''participants'', 40=''messages''',
  `writeLevel` int(11) NOT NULL DEFAULT '0' COMMENT '<0=ignored, 0=''none'', 10=join, 13=vote, 15=postPending, 20=post, 23=relate, 25=suggest, 30=edit, 40=close',
  `adminLevel` int(11) NOT NULL DEFAULT '0' COMMENT '<0=ignored, 0=''none'', 10=''publish'', 20=''invite'', 30=''manage'', 40=''own''',
  `permissions` varchar(255) DEFAULT NULL COMMENT 'JSON array of permission names',
  PRIMARY KEY (`publisherId`,`streamName`,`ofUserId`,`ofContactLabel`),
  KEY `subscriber` (`ofUserId`),
  KEY `contacts` (`ofContactLabel`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on publisherId''s shard';

# Dump of table {$prefix}avatar
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}avatar`;

CREATE TABLE `{$prefix}avatar` (
  `toUserId` varbinary(31) NOT NULL COMMENT 'the user the avatar is being displayed to',
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'the user whose avatar is being displayed',
  `updatedTime` timestamp NULL DEFAULT NULL COMMENT 'the time this record was last updated',
  `username` varchar(255) NOT NULL COMMENT 'just a cache of the username',
  `firstName` varchar(255) NOT NULL DEFAULT '' COMMENT 'if not empty, the user can see this first name',
  `lastName` varchar(255) NOT NULL DEFAULT '' COMMENT 'if not empty, the user can see this last name',
  `icon` varbinary(255) NOT NULL COMMENT 'the icon to display',
PRIMARY KEY (`toUserId`,`publisherId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on publisherId''s shard';

# Dump of table {$prefix}invite
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}invite`;

CREATE TABLE `{$prefix}invite` (
  `token` varbinary(255) NOT NULL COMMENT 'unique random token for the link, to embed in invitation URLs',
  `userId` varbinary(31) NOT NULL COMMENT 'id of user who is being invited to the stream',
  `publisherId` varbinary(31) NOT NULL COMMENT 'id of user who publishes the stream',
  `streamName` varbinary(255) NOT NULL COMMENT 'the name of the stream to which the user is being invited',
  `invitingUserId` varbinary(31) NOT NULL COMMENT 'id of the user who invited the person to the stream. This is publisherId unless user has adminLevel >= invite',
  `displayName` varchar(255) NOT NULL COMMENT 'display name, computed at invite time',
  `appUrl` varbinary(255) NOT NULL COMMENT 'the application url where user is invited.',
  `readLevel` int(11) DEFAULT NULL COMMENT '0=none, 10=''see'', 20=''content'', 30=''participants'', 40=''messages''',
  `writeLevel` int(11) DEFAULT NULL COMMENT '0=none, 10=join, 13=vote, 15=postPending, 20=post, 23=relate',
  `adminLevel` int(11) DEFAULT NULL COMMENT '0=none, 10=''publish'', 20=''invite'', 30=''manage'', 40=''own''',
  `state` enum('pending','accepted','declined','forwarded','expired','claimed') NOT NULL DEFAULT 'pending' COMMENT 'the state of the invite',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'saved on shard of publisherId',
  `expireTime` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`token`),
  KEY `user` (`userId`,`token`),
  KEY `stream` (`publisherId`,`streamName`,`userId`),
  KEY `inviting` (`invitingUserId`,`publisherId`,`streamName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stores invites to the stream on publisher id server';

# Dump of table {$prefix}invited
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}invited`;

CREATE TABLE `{$prefix}invited` (
  `userId` varbinary(31) NOT NULL COMMENT 'id of user who is being invited to the stream',
  `token` varbinary(255) NOT NULL COMMENT 'unique random token for the link, to embed in invitation URLs',
  `state` enum('pending','accepted','declined','forwarded','expired','claimed') NOT NULL DEFAULT 'pending' COMMENT 'the state of the invite',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedTime` timestamp NULL DEFAULT NULL,
  `expireTime` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`userId`,`token`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stores tokens where user is invited on userId server';

# Dump of table {$prefix}message
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}message`;

CREATE TABLE `{$prefix}message` (
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of user that publishes the stream to place the message on',
  `streamName` varbinary(255) NOT NULL COMMENT 'the stream to place the message on',
  `ordinal` int(10) unsigned NOT NULL DEFAULT '0' COMMENT 'used for storing the order of messages in the stream',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'saved on shard of publisherId',
  `sentTime` timestamp NULL DEFAULT NULL COMMENT 'time on shard of byUserId',
  `byUserId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of the user sending message.',
  `byClientId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of the Streams client sending message.',
  `type` varbinary(255) NOT NULL COMMENT 'the type of the message, like Module/a or Module/a/b',
  `content` varchar(1023) NOT NULL COMMENT 'short human-readable content, like twitter and its 140 characters',
  `instructions` varchar(4092) NOT NULL COMMENT 'instructions are in a machine-readable format depending on the type of the stream. delta, reverse delta, linking and embedding',
  `weight` decimal(10,4) NOT NULL DEFAULT '1.0000' COMMENT 'this may depend on the reputation of user_by relative to the stream',
  PRIMARY KEY (`publisherId`,`streamName`,`ordinal`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on publisherId''s shard';

# Dump of table {$prefix}notification
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}notification`;

CREATE TABLE `{$prefix}notification` (
  `userId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'the user to notify',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'the owner of the stream causing the notification',
  `streamName` varbinary(255) NOT NULL COMMENT 'the stream causing the notification',
  `type` varbinary(255) DEFAULT NULL COMMENT 'the type of message',
  `viewedTime` timestamp NULL DEFAULT NULL COMMENT 'saved on shard of userId',
  `readTime` timestamp NULL DEFAULT NULL COMMENT 'saved on shard of userId',
  `comment` varbinary(255) DEFAULT NULL COMMENT 'optional human-readable comment to display along with notification',
  PRIMARY KEY (`userId`,`insertedTime`),
  KEY `viewedTime` (`viewedTime`),
  KEY `stream` (`publisherId`,`streamName`),
  KEY `recipient` (`userId`),
  KEY `count` (`publisherId`,`streamName`,`type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on userId''s shard';

# Dump of table {$prefix}participant
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}participant`;

CREATE TABLE `{$prefix}participant` (
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'The id of the user publishing the stream',
  `streamName` varbinary(255) NOT NULL COMMENT 'The name of the stream where people can chat about this message',
  `userId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'The id of the user participating in the stream',
  `streamType` varchar(63) DEFAULT NULL,
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedTime` timestamp NULL DEFAULT NULL,
  `state` enum('invited','participating','left') NOT NULL COMMENT 'the state of the participant in the stream',
  `subscribed` enum('yes','no') NOT NULL DEFAULT 'no' COMMENT 'whether the participant is currently subscribed',
  `posted` enum('yes','no') NOT NULL DEFAULT 'no' COMMENT 'whether the participant has posted a message to this stream',
  `reason` varchar(255) NOT NULL COMMENT 'about the participant and why they are in the stream',
  `enthusiasm` decimal(10,4) NOT NULL DEFAULT '0.0000' COMMENT 'how open they are to meeting someone',
  `reputation` int(11) NOT NULL DEFAULT '0' COMMENT 'participant''s reputation in the stream, usually used for topics',
  PRIMARY KEY (`publisherId`,`streamName`,`userId`),
  KEY `subscribed` (`publisherId`,`streamName`,`subscribed`),
  KEY `posted` (`publisherId`,`streamName`,`posted`),
  KEY `inserted` (`publisherId`,`streamName`,`insertedTime`),
  KEY `updated` (`publisherId`,`streamName`,`updatedTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on publisherId''s shard';

# Dump of table {$prefix}related_from
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}related_from`;

CREATE TABLE `{$prefix}related_from` (
  `fromPublisherId` varbinary(31) NOT NULL COMMENT 'publisherId of member',
  `fromStreamName` varbinary(255) NOT NULL COMMENT 'name of member',
  `type` varbinary(255) NOT NULL DEFAULT '' COMMENT 'The type of the relation. Can be empty.',
  `toPublisherId` varbinary(31) NOT NULL COMMENT 'publisherId of category',
  `toStreamName` varbinary(255) NOT NULL COMMENT 'name of category',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`fromPublisherId`,`fromStreamName`,`type`,`toPublisherId`,`toStreamName`),
  KEY `sorting` (`fromPublisherId`,`fromStreamName`,`type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='This table is owned by publisher of the member stream';

# Dump of table {$prefix}related_to
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}related_to`;

CREATE TABLE `{$prefix}related_to` (
  `toPublisherId` varbinary(31) NOT NULL COMMENT 'publisherId of category',
  `toStreamName` varbinary(255) NOT NULL COMMENT 'name of category',
  `type` varbinary(255) NOT NULL DEFAULT '' COMMENT 'The type of the relation. Can be empty.',
  `fromPublisherId` varbinary(31) NOT NULL COMMENT 'publisherId of member',
  `fromStreamName` varbinary(255) NOT NULL COMMENT 'name of member',
  `weight` decimal(10,4) NOT NULL DEFAULT '1.0000' COMMENT 'used for sorting',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`toPublisherId`,`toStreamName`,`type`,`fromPublisherId`,`fromStreamName`),
  KEY `sorting` (`toPublisherId`,`toStreamName`,`type`,`weight`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='This table is owned by publisher of the aggregator stream';

# Dump of table {$prefix}rule
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}rule`;

CREATE TABLE `{$prefix}rule` (
  `ofUserId` varbinary(31) NOT NULL DEFAULT '',
  `publisherId` varbinary(31) NOT NULL DEFAULT '',
  `streamName` varbinary(255) NOT NULL,
  `ordinal` int(11) NOT NULL,
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `readyTime` timestamp NULL DEFAULT NULL COMMENT 'time from which user is ready to receive notifications again',
  `filter` varchar(255) NOT NULL DEFAULT '' COMMENT '{"types": [ array of message types ], "labels": [ ]}',
  `deliver` varchar(255) NOT NULL COMMENT 'JSON object with possible keys "email", "mobile", "device", "platforms", "to", "filter", and "mode"',
  `relevance` decimal(10,4) NOT NULL DEFAULT 1 COMMENT 'used to prioritize messages for display and processing',
  PRIMARY KEY (`ofUserId`,`publisherId`,`streamName`,`ordinal`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='rules applied on the user''s side for notifications coming in';

# Dump of table {$prefix}sent
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}sent`;

CREATE TABLE `{$prefix}sent` (
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of user that publishes the stream to place the message on',
  `streamName` varbinary(255) NOT NULL COMMENT 'the stream to place the message on',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'saved on shard of publisherId',
  `sentTime` timestamp NULL DEFAULT NULL COMMENT 'time on shard of byUserId',
  `byUserId` varbinary(31) NOT NULL COMMENT 'id of the user sending the message.',
  `comment` varchar(255) NOT NULL COMMENT 'short human-readable content, like twitter and its 140 characters',
  `instructions` varchar(4092) DEFAULT NULL COMMENT 'instructions are in a machine-readable format depending on the type of the stream. delta, reverse delta, linking and embedding',
  `chatPublisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'If not 0, id of user that publishes the chat stream',
  `chatStreamName` varbinary(255) DEFAULT NULL COMMENT 'The name of the stream where people can chat about this message',
  KEY `stream` (`publisherId`,`streamName`),
  KEY `author` (`byUserId`),
  KEY `insertedTime` (`insertedTime`),
  KEY `sentTime` (`sentTime`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on byUserId''s shard';

# Dump of table {$prefix}stream
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}stream`;

CREATE TABLE `{$prefix}stream` (
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of user that publishes the stream',
  `name` varbinary(255) NOT NULL COMMENT 'the name of the stream',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'saved on shard of publisherId',
  `updatedTime` timestamp NULL DEFAULT NULL COMMENT 'the time that this stream row has last changed for whatever reason',
  `type` varchar(63) NOT NULL COMMENT 'the type of the stream like Module/a or Module/a/b',
  `title` varchar(255) NOT NULL COMMENT 'human-readable title of the stream',
  `icon` varbinary(255) NOT NULL DEFAULT 'default' COMMENT 'relative path to stream''s icon folder, containing 48.png, 32.png and 16.png',
  `content` varchar(1023) NOT NULL COMMENT 'This content can be indexable',
  `attributes` varchar(1023) DEFAULT NULL COMMENT 'attributes are stored as JSON',
  `readLevel` int(11) NOT NULL DEFAULT '40' COMMENT '10=''see'', 20=''content'', 30=''participants'', 40=''messages''',
  `writeLevel` int(11) NOT NULL DEFAULT '10' COMMENT '0=self, 10=join, 13=vote, 15=postPending, 20=post, 23=relate, 25=suggest, 30=edit, 40=close',
  `adminLevel` int(11) NOT NULL DEFAULT '20' COMMENT '10=''publish'', 20=''invite'', 30=''manage'', 40=''own''',
  `permissions` varchar(255) DEFAULT NULL COMMENT 'JSON array of permission names',
  `inheritAccess` varbinary(255) DEFAULT NULL COMMENT 'JSON array of [[publisherId, streamName],...] to inherit access from',
  `messageCount` int(11) NOT NULL DEFAULT '0',
  `participantCount` int(11) NOT NULL DEFAULT '0',
  `closedTime` TIMESTAMP NULL DEFAULT NULL COMMENT 'this records the time, if any, that the stream was last closed for updates',
  PRIMARY KEY (`publisherId`,`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='stored primarily on publisherId''s shard';

# Dump of table {$prefix}subscription
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}subscription`;

CREATE TABLE `{$prefix}subscription` (
  `publisherId` varbinary(31) NOT NULL DEFAULT '' COMMENT 'id of user who publishes the stream',
  `streamName` varbinary(255) NOT NULL DEFAULT '' COMMENT 'the name of the stream being subscribed to',
  `ofUserId` varbinary(31) NOT NULL COMMENT 'local to shard of publisherId',
  `insertedTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'saved on shard of publisherId',
  `updatedTime` timestamp NULL DEFAULT NULL COMMENT 'saved on shard of publisherId',
  `untilTime` timestamp NULL DEFAULT NULL COMMENT 'this is the time after which subscription won''t match',
  `filter` varchar(255) NOT NULL,
  `duration` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`publisherId`,`streamName`,`ofUserId`),
  KEY `subscriber` (`ofUserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='{"type": [ array of message types ], "notifications": 5}';

# Dump of table {$prefix}total
# ------------------------------------------------------------

DROP TABLE IF EXISTS `{$prefix}total`;

CREATE TABLE `{$prefix}total` (
  `publisherId` varbinary(31) NOT NULL,
  `streamName` varbinary(255) NOT NULL,
  `messageType` varbinary(255) NOT NULL,
  `messageCount` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`publisherId`,`streamName`,`messageType`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COMMENT='Used to count the number of messages of a certain type';
